{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Supernova Engine","text":"<p>This is the official documentation and tutorials of Supernova Engine.</p> <p>Note</p> <p>Docs is under development.</p> Entity component system <p>Designed in modern architecture using pattern of \"entities\" with \"components\" of data.</p> Simple and Fast <p>Supernova doesn't have unnecessary stuffs like heavy GUI and extra processing.</p> Lua or C++ <p>You choose the best language is good for you. Lua and C++ can be used to make wonderful graphics and games.</p> Cross-platform <p>Write the code once and use it in Android, iOS, HTML5, Windows, Linux and MacOS. It runs native in each platform with OpenGL, Metal or DirectX.  </p> PBR shaders <p>Very realistic shaders to make state-of-the-art graphics.</p> Data oriented design <p>Get rid all performance issues of Object Oriented Programming, arranging data to take improve of CPU caching.</p> Sprites and animations <p>A sprite object makes everything easy when working with animations.</p> Dynamic shadows <p>You can use many kind of lights with support for dynamic shadows.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Creating a basic project Coordinate systems </p>"},{"location":"#building-supernova","title":"Building Supernova","text":"<p>Building for Windows Building for Linux Building for maxOS Building for Android Building for iOS Building for HTML5 (Emscripten)</p>"},{"location":"#learning","title":"Learning","text":"<p>Screen scaling Object animation Particle system </p>"},{"location":"getting-started/creating-a-basic-project/","title":"Creating a basic project","text":"<p>In this example we will create a simple triangle. The same sample code can be used in any platform.</p>"},{"location":"getting-started/creating-a-basic-project/#file-organization-tree","title":"File organization tree","text":"<ul> <li> engine<ul> <li> core</li> <li> libs</li> <li> renders</li> <li> shaders</li> </ul> </li> <li> platform<ul> <li> android</li> <li> apple</li> <li> emscripten</li> <li> glfw</li> <li> sokol</li> </ul> </li> <li> project <code>(your project here)</code><ul> <li> assets</li> <li> lua<ul> <li> main.lua</li> </ul> </li> <li> main.cpp</li> </ul> </li> <li> tools<ul> <li> bin</li> <li> binshaders</li> <li> shaderlib</li> </ul> </li> <li> workspaces<ul> <li> androidstudio</li> <li> xcode</li> </ul> </li> </ul>"},{"location":"getting-started/creating-a-basic-project/#1-using-c","title":"1. Using C++","text":"<p>In Supernova file tree there is a <code>main.cpp</code> file located in <code>project/</code> folder. This file is used to start the game development in C++. As you can see, there is a call for <code>supernova.h</code>, that will call <code>init()</code> function when game started.</p> <p>Edit it with the code:</p> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Polygon.h\"\n\nScene scene;\nPolygon triangle(&amp;scene);\n\nvoid init(){\ntriangle.addVertex(0, -100);\ntriangle.addVertex(-50, 50);\ntriangle.addVertex(50, 50);\n\ntriangle.setPosition(Vector3(300,300,0));\ntriangle.setColor(0.6, 0.2, 0.6, 1);\n\nEngine::setCanvasSize(1000,480);\nEngine::setScene(&amp;scene);\n}\n</code></pre>"},{"location":"getting-started/creating-a-basic-project/#2-using-lua","title":"2. Using Lua","text":"<p>In Supernova file tree there is a <code>main.lua</code> file located in <code>project/lua/</code> folder. This file is used to start the game development in Lua. You can call any other Lua files by this.</p> <p>Edit it with the code:</p> <pre><code>scene = Scene()\ntriangle = Polygon(scene)\n\ntriangle:addVertex(0, -100)\ntriangle:addVertex(-50, 50)\ntriangle:addVertex(Vector3(50, 50,0))\n\ntriangle.position = Vector3(300,300,0)\ntriangle:setColor(0.6, 0.2, 0.6, 1)\n\nEngine.setCanvasSize(1000,480)\nEngine.setScene(scene)\n</code></pre> <p>Now you can run to see the result.</p> <p>Warning</p> <p>If you have both Lua and C++ calling Supernova static method <code>setScene()</code>, the last call will be from C++, so Lua code will not work. Use <code>NO_CPP_INIT</code> or <code>NO_LUA_INIT</code> macro to avoid init to be called.</p>"},{"location":"getting-started/building/building-for-android/","title":"Building for Android","text":""},{"location":"getting-started/building/building-for-android/#for-all-platforms","title":"For all platforms","text":""},{"location":"getting-started/building/building-for-android/#1-clone-supernova-project","title":"1. Clone Supernova project","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-android/#2-download-and-install-android-studio","title":"2. Download and install Android Studio","text":"<p>Download latest version of Android Studio.</p> <p>Install it following instructions.</p>"},{"location":"getting-started/building/building-for-android/#3-open-project-using-template","title":"3. Open project using template","text":"<p>Open Android Studio, click in <code>Open an existing Android Studio project</code> and select <code>workspaces/android/</code> where Supernova was cloned.</p> <p>If asked to install Android NDK, CMake and or other addons, select yes.</p>"},{"location":"getting-started/building/building-for-html5/","title":"Building for HTML5","text":""},{"location":"getting-started/building/building-for-html5/#for-all-platforms","title":"For all platforms","text":""},{"location":"getting-started/building/building-for-html5/#1-clone-supernova-project","title":"1. Clone Supernova project","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-html5/#2-download-and-install-emscripten","title":"2. Download and install Emscripten","text":"<p>Download Emscripten and follow install instructions.</p>"},{"location":"getting-started/building/building-for-html5/#3-compile-supernova","title":"3. Compile Supernova","text":""},{"location":"getting-started/building/building-for-html5/#for-linux-and-osx","title":"For Linux and OSX:","text":"<p>Add Emscripten root path to a system environment variable:</p> <p><code>export $EMSCRIPTEN=&lt;path_to_emscripten&gt;</code></p>"},{"location":"getting-started/building/building-for-html5/#for-windows","title":"For Windows:","text":"<p>Download and install MinGW and CMake.</p> <p>Note</p> <p>MinGW and CMake must be in PATH environment variable of Windows. To test it, try to run <code>mingw32-make</code> and <code>cmake</code> in Prompt.</p>"},{"location":"getting-started/building/building-for-html5/#for-all-platforms_1","title":"For all platforms","text":"<p>The directory where you clone Supernova go to: <code>workspaces/emscripten/</code> execute in terminal:</p> <pre><code>python3 supernova.py --build --platform web\n</code></pre> <p>When finished you can see generated <code>.js</code> and <code>.html</code> files in <code>build/web</code> folder. Open with any browser.</p> <p>Warning</p> <p>Open <code>.html</code> locally can result some Javascript errors. You can use command <code>python3 -m http.server</code> to deploy a simple HTTP server and open in browser <code>http://127.0.0.1:8000</code>.</p>"},{"location":"getting-started/building/building-for-ios/","title":"Building for iOS","text":""},{"location":"getting-started/building/building-for-ios/#only-for-osx","title":"Only for OSX","text":""},{"location":"getting-started/building/building-for-ios/#1-clone-supernova-project","title":"1. Clone Supernova project","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-ios/#2-download-xcode","title":"2. Download Xcode","text":"<p>Using Mac App Store find Xcode.</p>"},{"location":"getting-started/building/building-for-ios/#3-open-project-using-template","title":"3. Open project using template","text":"<ul> <li>In Supernova directory, open Xcode project workspace in: <code>workspaces/xcode/</code>.</li> <li>Select target <code>Supernova iOS</code>.</li> </ul>"},{"location":"getting-started/building/building-for-linux/","title":"Building for Linux","text":""},{"location":"getting-started/building/building-for-linux/#1-clone-supernova-repo","title":"1. Clone Supernova repo","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-linux/#2-install-dependencies","title":"2. Install dependencies","text":"<ul> <li>libglfw3-dev</li> <li>libxi-dev</li> <li>libxcursor-dev</li> <li>libgl1-mesa-dev</li> <li>ninja-build cmake</li> </ul>"},{"location":"getting-started/building/building-for-linux/#3-build-for-linux","title":"3. Build for Linux","text":""},{"location":"getting-started/building/building-for-linux/#a-using-build-tool","title":"a. Using build tool","text":"<p>In <code>tools</code> directory:</p> <pre><code>python3 supernova.py --build --platform linux\n</code></pre>"},{"location":"getting-started/building/building-for-linux/#b-using-cmake","title":"b. Using CMake","text":"<p>In Supernova root directory:</p> <p><pre><code>mkdir build\n</code></pre> <pre><code>mkdir instdir\n</code></pre> <pre><code>cmake \\\n-S . \\\n-B build \\\n-DCMAKE_BUILD_TYPE=Debug \\\n-G \"Ninja\" \\\n-DCMAKE_INSTALL_PREFIX:PATH=instdir\n</code></pre> <pre><code>cmake --build build --config Debug --target supernova-project\n</code></pre> <pre><code>cmake --install build --config Debug --strip\n</code></pre></p>"},{"location":"getting-started/building/building-for-macos/","title":"Building for macOS","text":""},{"location":"getting-started/building/building-for-macos/#1-clone-supernova-repo","title":"1. Clone Supernova repo","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-macos/#2-install-dependencies","title":"2. Install dependencies","text":"<ul> <li>cmake</li> <li>ninja</li> </ul>"},{"location":"getting-started/building/building-for-macos/#3-build-for-macos","title":"3. Build for macOS","text":""},{"location":"getting-started/building/building-for-macos/#a-using-build-tool","title":"a. Using build tool","text":"<p>In <code>tools</code> directory:</p> <pre><code>python3 supernova.py --build --platform macos\n</code></pre>"},{"location":"getting-started/building/building-for-macos/#b-using-cmake","title":"b. Using CMake","text":"<p>In Supernova root directory:</p> <p><pre><code>mkdir build\n</code></pre> <pre><code>mkdir instdir\n</code></pre> <pre><code>cmake \\\n-S . \\\n-B build \\\n-DCMAKE_BUILD_TYPE=Debug \\\n-G \"Ninja\" \\\n-DCMAKE_INSTALL_PREFIX:PATH=instdir\n</code></pre> <pre><code>cmake --build build --config Debug --target supernova-project\n</code></pre> <pre><code>cmake --install build --config Debug --strip\n</code></pre></p>"},{"location":"getting-started/building/building-for-windows/","title":"Building for Windows","text":""},{"location":"getting-started/building/building-for-windows/#1-clone-supernova-repo","title":"1. Clone Supernova repo","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-windows/#2-install-dependencies","title":"2. Install dependencies","text":"<ul> <li>cmake</li> </ul>"},{"location":"getting-started/building/building-for-windows/#3-build-for-windows","title":"3. Build for Windows","text":""},{"location":"getting-started/building/building-for-windows/#a-using-build-tool","title":"a. Using build tool","text":"<p>In <code>tools</code> directory:</p> <pre><code>python3 supernova.py --build --platform windows\n</code></pre>"},{"location":"getting-started/building/building-for-windows/#b-using-cmake","title":"b. Using CMake","text":"<p>In Supernova root directory:</p> <p><pre><code>mkdir build\n</code></pre> <pre><code>mkdir instdir\n</code></pre> <pre><code>cmake \\\n-S . \\\n-B build \\\n-DCMAKE_BUILD_TYPE=Debug \\\n-G \"Visual Studio 17 2022\" \\\n-DCMAKE_INSTALL_PREFIX:PATH=instdir\n</code></pre> <pre><code>cmake --build build --config Debug --target supernova-project\n</code></pre> <pre><code>cmake --install build --config Debug --strip\n</code></pre></p>"},{"location":"learning/coordinate-systems/","title":"Coordinate systems","text":"<p>Supernova uses the origin of coordinates at bottom-left for 2D and 3D projects and top-left for UI scenes. This image represents an abstract canvas:</p> <p></p> <p>Under development...</p>"},{"location":"learning/object-animation/","title":"Object animation","text":"<p>It`s possible to animate any object. This page explains how to make the animation work in many ways and ease functions. Animations in Supernova are made by Actions. These Actions can be used in almost all Scene objects.</p> <p>There are these types of actions:</p> <ul> <li>TimedAction<ul> <li>PositionAction</li> <li>RotationAction</li> <li>ScaleAction</li> <li>ColorAction</li> <li>AlphaAction</li> </ul> </li> <li>ParticlesAnimation</li> <li>SpriteAnimation</li> <li>Animation</li> </ul> <p>Actions live sample </p>"},{"location":"learning/object-animation/#action-control","title":"Action control","text":"<p>Any kind of action can be controlled with these tree main methods:</p> Method Description <code>start()</code> Start an Action ou resume if is paused. <code>stop()</code> Stop and reset it timestamp. <code>pause()</code> Pause an Action, could be resumed with run()."},{"location":"learning/object-animation/#action-events","title":"Action events","text":"<p>Also, you can use actions with these callback events:</p> Event Description <code>onStart()</code> When method Start() is called. <code>onPause()</code> When method pause() is called. <code>onStop()</code> When method stop() is called. <code>onStep()</code> Called at each iteration."},{"location":"learning/object-animation/#timedaction","title":"TimedAction","text":"<p>TimedAction is a generic type of action that has the values <code>time</code> and <code>value</code>. Both values can range from 0 to 1. The <code>time</code> is always fixed by a pre-defined duration, but <code>value</code> is calculated by an ease function. <code>Value</code> can be controlled by both pre-defined functions and user-defined functions.</p> <p>Getting value and time from Action:</p> <code>C++</code> <code>Lua</code> <pre><code>float time = action.getTime();\nfloat value = action.getValue();\n</code></pre> <pre><code>time = action:getTime()\nvalue = action:getValue()\n</code></pre> Components ActionComponent TimedActionComponent <p>Example how to use TimeAction to move a triangle that is activated by mouse click and positioned by onStep function:</p> <code>C++</code> <code>Lua</code> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Polygon.h\"\n#include \"TimedAction.h\"\n\nScene scene;\nPolygon triangle(&amp;scene);\nTimedAction action(&amp;scene);\n\nvoid onActionStep();\nvoid onMouseDown(int button, float x, float y, int mods);\n\nvoid init(){\ntriangle.addVertex(0, -100);\ntriangle.addVertex(-50, 50);\ntriangle.addVertex(50, 50);\n\ntriangle.setPosition(Vector3(300,300,0));\ntriangle.setColor(0.6, 0.2, 0.6, 1);\n\naction.setDuration(10);\naction.getComponent&lt;ActionComponent&gt;().onStep = onActionStep;\n\nEngine::setScene(&amp;scene);\nEngine::onMouseDown = onMouseDown;\n}\n\nvoid onActionStep(){\nfloat angle = M_PI * 2.0 * action.getValue();\ntriangle.setPosition(cos(angle)*100 + 450, sin(angle)*100 + 300, 0);\n}\n\nvoid onMouseDown(int button, float x, float y, int mods){\nif (action.isRunning())\naction.pause();\nelse\naction.start();\n}\n</code></pre> <pre><code>scene = Scene()\ntriangle = Polygon(scene)\naction = TimedAction(scene)\n\ntriangle:addVertex(0, -100)\ntriangle:addVertex(-50, 50)\ntriangle:addVertex(Vector3(50, 50,0))\n\ntriangle.position = Vector3(300,300,0)\ntriangle:setColor(0.6, 0.2, 0.6, 1)\n\naction.duration = 10\n\nEngine.setScene(scene)\n\nfunction onActionStep()\n    angle = math.pi * 2.0 * action:getValue()\n    triangle:setPosition(math.cos(angle)*100 + 450, math.sin(angle)*100 + 300, 0);\nend\naction:getActionComponent().onStep = onActionStep\n\nfunction onMouseDown(button, x, y, mods)\n    if (action:isRunning()) then\n        action:pause()\n    else\n        action:start()\n    end\nend\nEngine.onMouseDown = onMouseDown\n</code></pre> <p>Similar to the previous example, the same function can be used with PositionAction instead of TimeAction. This time it is no longer necessary to use <code>onStep()</code>:</p> <code>C++</code> <code>Lua</code> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Polygon.h\"\n#include \"PositionAction.h\"\n\nScene scene;\nPolygon triangle(&amp;scene);\nPositionAction action(&amp;scene);\n\nvoid onMouseDown(int button, float x, float y, int mods);\n\nvoid init(){\ntriangle.addVertex(0, -100);\ntriangle.addVertex(-50, 50);\ntriangle.addVertex(50, 50);\n\ntriangle.setPosition(Vector3(300,300,0));\ntriangle.setColor(0.6, 0.2, 0.6, 1);\n\naction.setFunctionType(EaseType::ELASTIC_IN_OUT);\naction.setAction(triangle.getPosition(), Vector3(0,10,0), 2, true);\naction.setTarget(triangle.getEntity());\n\nEngine::setScene(&amp;scene);\nEngine::onMouseDown = onMouseDown;\n}\n\nvoid onMouseDown(int button, float x, float y, int mods){\nif (action.isRunning())\naction.pause();\nelse\naction.start();\n}\n</code></pre> <pre><code>scene = Scene()\ntriangle = Polygon(scene)\naction = PositionAction(scene)\n\ntriangle:addVertex(0, -100)\ntriangle:addVertex(-50, 50)\ntriangle:addVertex(Vector3(50, 50,0))\n\ntriangle.position = Vector3(300,300,0)\ntriangle:setColor(0.6, 0.2, 0.6, 1)\n\naction:setFunctionType(EaseType.ELASTIC_IN_OUT)\naction:setAction(triangle.position, Vector3(0,10,0), 2, true)\naction.target = triangle.entity\n\nEngine.setScene(scene)\n\nfunction onMouseDown(button, x, y, mods)\n    if (action:isRunning()) then\n        action:pause()\n    else\n        action:start()\n    end\nend\nEngine.onMouseDown = onMouseDown\n</code></pre>"},{"location":"learning/object-animation/#pre-defined-ease-functions","title":"Pre-defined ease functions","text":""},{"location":"learning/object-animation/#linear","title":"Linear","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::LINEAR);\n</code></pre> <pre><code>action:setFunctionType(EaseType.LINEAR)\n</code></pre>"},{"location":"learning/object-animation/#quad","title":"Quad","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::QUAD_IN);\naction.setFunctionType(EaseType::QUAD_OUT);\naction.setFunctionType(EaseType::QUAD_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.QUAD_IN)\naction:setFunctionType(EaseType.QUAD_OUT)\naction:setFunctionType(EaseType.QUAD_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#cubic","title":"Cubic","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::CUBIC_IN);\naction.setFunctionType(EaseType::CUBIC_OUT);\naction.setFunctionType(EaseType::CUBIC_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.CUBIC_IN)\naction:setFunctionType(EaseType.CUBIC_OUT)\naction:setFunctionType(EaseType.CUBIC_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#quart","title":"Quart","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::QUART_IN);\naction.setFunctionType(EaseType::QUART_OUT);\naction.setFunctionType(EaseType::QUART_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.QUART_IN)\naction:setFunctionType(EaseType.QUART_OUT)\naction:setFunctionType(EaseType.QUART_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#quint","title":"Quint","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::QUINT_IN);\naction.setFunctionType(EaseType::QUINT_OUT);\naction.setFunctionType(EaseType::QUINT_IN_OUT);\n</code></pre> <p>``` lua</p> <p>action:setFunctionType(EaseType.QUINT_IN)    action:setFunctionType(EaseType.QUINT_OUT)    action:setFunctionType(EaseType.QUINT_IN_OUT)     ```</p>"},{"location":"learning/object-animation/#sine","title":"Sine","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::SINE_IN);\naction.setFunctionType(EaseType::SINE_OUT);\naction.setFunctionType(EaseType::SINE_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.SINE_IN)\naction:setFunctionType(EaseType.SINE_OUT)\naction:setFunctionType(EaseType.SINE_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#expo","title":"Expo","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::EXPO_IN);\naction.setFunctionType(EaseType::EXPO_OUT);\naction.setFunctionType(EaseType::EXPO_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.EXPO_IN)\naction:setFunctionType(EaseType.EXPO_OUT)\naction:setFunctionType(EaseType.EXPO_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#circ","title":"Circ","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::CIRC_IN);\naction.setFunctionType(EaseType::CIRC_OUT);\naction.setFunctionType(EaseType::CIRC_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.CIRC_IN)\naction:setFunctionType(EaseType.CIRC_OUT)\naction:setFunctionType(EaseType.CIRC_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#elastic","title":"Elastic","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::ELASTIC_IN);\naction.setFunctionType(EaseType::ELASTIC_OUT);\naction.setFunctionType(EaseType::ELASTIC_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.ELASTIC_IN)\naction:setFunctionType(EaseType.ELASTIC_OUT)\naction:setFunctionType(EaseType.ELASTIC_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#back","title":"Back","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::BACK_IN);\naction.setFunctionType(EaseType::BACK_OUT);\naction.setFunctionType(EaseType::BACK_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.BACK_IN)\naction:setFunctionType(EaseType.BACK_OUT)\naction:setFunctionType(EaseType.BACK_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#bounce","title":"Bounce","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::BOUNCE_IN);\naction.setFunctionType(EaseType::BOUNCE_OUT);\naction.setFunctionType(EaseType::BOUNCE_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.BOUNCE_IN)\naction:setFunctionType(EaseType.BOUNCE_OUT)\naction:setFunctionType(EaseType.BOUNCE_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#user-defined-ease-functions","title":"User-defined ease functions","text":"<p>It's also possible to create new functions and attach it to a TimeAction.</p> <code>C++</code> <code>Lua</code> <pre><code>float newFunction(float time){\nreturn time * 2;\n}\n\naction.getComponent&lt;TimedActionComponent&gt;().function = newFunction;\n</code></pre> <pre><code>function newFunction(time)\n    return time * 2\nend\n\naction:getTimedActionComponent().function = newFunction\n</code></pre>"},{"location":"learning/object-animation/#positionaction","title":"PositionAction","text":"<p>Is used to generate a movement in objects.</p> Components ActionComponent TimedActionComponent PositionActionComponent <code>C++</code> <code>Lua</code> <pre><code>PositionAction action(&amp;scene);\naction.setAction(Vector3(100,200,0), Vector3(0,10,0), 2, false);\n</code></pre> <pre><code>action = PositionAction(scene)\naction:setAction(Vector3(100,200,0), Vector3(0,10,0), 2, true)\n</code></pre>"},{"location":"learning/object-animation/#rotationaction","title":"RotationAction","text":"<p>Is used to generate rotation in objects. Rotations are made by quaternions, but you can easily a create quaternions with angles.</p> Components ActionComponent TimedActionComponent RotationActionComponent <code>C++</code> <code>Lua</code> <pre><code>Quaternion fromAngle;\nfromAngle.fromAngle(20);\n\nQuaternion toAngle;\ntoAngle.fromAngle(80);\n\nRotationAction action(&amp;scene);\naction.setAction(fromAngle, toAngle, 5, true);\n</code></pre> <pre><code>fromAngle = Quaternion()\nfromAngle:fromAngle(20)\n\ntoAngle = Quaternion()\ntoAngle:fromAngle(80)\n\naction = RotationAction(scene)\naction:setAction(fromAngle, toAngle, 2, true)\n</code></pre> <p>For default, a Quaternion method fromAngleAxis uses axis Z (for 2D projects) to perform a rotation, but it`s also possible to make rotations for any axis:</p> <code>C++</code> <code>Lua</code> <pre><code>fromAngle.fromAngleAxis(20, Vector3(0, 1, 0));\n</code></pre> <pre><code>fromAngle:fromAngleAxis(10, Vector3(0,1,0))\n</code></pre>"},{"location":"learning/object-animation/#scaleaction","title":"ScaleAction","text":"<p>Is used to change object scale. Scales are setting by Vector3. For example, if you want increase the object 3 times from Y axis you can use <code>Vector3(1, 3, 1)</code>.</p> Components ActionComponent TimedActionComponent ScaleActionComponent <code>C++</code> <code>Lua</code> <pre><code>ScaleAction action(&amp;scene);\naction.setAction(Vector3(1,1,1), Vector3(1,10,1), 2, true);\n</code></pre> <pre><code>action = ScaleAction(scene)\naction:setAction(Vector3(1,1,1), Vector3(1,10,1), 2, true)\n</code></pre>"},{"location":"learning/object-animation/#coloraction","title":"ColorAction","text":"<p>Is used to change the color of object.</p> Components ActionComponent TimedActionComponent ColorActionComponent <code>C++</code> <code>Lua</code> <pre><code>ColorAction action(&amp;scene);\naction.setAction(Vector3(0, 0.5, 0.8), Vector3(1, 0.4, 0), 5, true);\n</code></pre> <pre><code>action = ColorAction(scene)\naction:setAction(Vector3(0, 0.5, 0.8), Vector3(1, 0.4, 0), 5, true)\n</code></pre>"},{"location":"learning/object-animation/#alphaaction","title":"AlphaAction","text":"<p>Is used to change alpha factor of object. Alpha 1.0 \u00e9 full opaque object and alpha 0.0 is full transparent object.</p> Components ActionComponent TimedActionComponent AlphaActionComponent <code>C++</code> <code>Lua</code> <pre><code>AlphaAction action(&amp;scene);\naction.setAction(1, 0, 5, true);\n</code></pre> <pre><code>action = AlphaAction(scene)\naction:setAction(1, 0, 5, true)\n</code></pre>"},{"location":"learning/particle-system/","title":"Particle system","text":"<p>In Supernova to use particle system you have to two kind of tools: Particle Initializers and Particle Modifiers.</p> <ul> <li>Particle Initializers<ul> <li>Life</li> <li>Position</li> <li>Velocity</li> <li>Acceleration</li> <li>Color</li> <li>Alpha</li> <li>Size</li> <li>Sprite</li> <li>Rotation</li> </ul> </li> <li>Particle Modifiers<ul> <li>Position</li> <li>Velocity</li> <li>Acceleration</li> <li>Color</li> <li>Alpha</li> <li>Size</li> <li>Sprite</li> <li>Rotation</li> </ul> </li> </ul> <p>Particles live sample </p> <p>Here is an example how Inittializers and Modifiers can be used to create particles animation.</p> <code>C++</code> <code>Lua</code> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Particles.h\"\n#include \"ParticlesAnimation.h\"\n\nScene scene;\n\nParticles particles(&amp;scene);\nParticlesAnimation partianim(&amp;scene);\n\nvoid init(){\nparticles.setMaxParticles(100);\nparticles.setTexture(\"f4.png\");\nparticles.setPosition(300, 100, 0);\npartianim.setTarget(particles.getEntity());\n\npartianim.setRate(10);\n\npartianim.setLifeInitializer(10);\npartianim.setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0));\npartianim.setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0));\npartianim.setColorInitializer(Vector3(0,0,0), Vector3(1,1,1));\npartianim.setSizeInitializer(10, 50);\n\npartianim.setVelocityModifier(5, 8, Vector3(0,10,0), Vector3(0,300,0), EaseType::CUBIC_IN_OUT);\npartianim.setAlphaModifier(4, 6, 1, 0.2);\n\nEngine::setScene(&amp;scene);\n\npartianim.start();\n}\n</code></pre> <pre><code>scene = Scene()\n\nparticles = Particles(scene)\npartianim = ParticlesAnimation(scene)\n\nparticles.maxParticles = 100\nparticles:setPosition(300, 100, 0)\nparticles:setTexture(\"f4.png\")\npartianim.target = particles.entity\n\npartianim.rate = 10\n\npartianim:setLifeInitializer(10)\npartianim:setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0))\npartianim:setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0))\npartianim:setColorInitializer(Vector3(0,0,0), Vector3(1,1,1))\npartianim:setSizeInitializer(10, 50)\n\npartianim:setVelocityModifier(5, 8, Vector3(0,10,0), Vector3(0,300,0), EaseType.CUBIC_IN_OUT)\npartianim:setAlphaModifier(4, 6, 1, 0.2)\n\nEngine.setScene(scene)\n\npartianim:start()\n</code></pre>"},{"location":"learning/particle-system/#particle-initializers","title":"Particle Initializers","text":""},{"location":"learning/particle-system/#life-initializer","title":"Life Initializer","text":"<p>Every particle has its life and this life is regressive. When a particle starts, through this class you can set the lifetime of it. Throughout the life of the particle, when it reaches 0, the particle dies.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setLifeInitializer(10, 10);\n</code></pre> <pre><code>partianim:setLifeInitializer(10, 10)\n</code></pre>"},{"location":"learning/particle-system/#position-initializer","title":"Position Initializer","text":"<p>The initial position of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0));\n</code></pre> <pre><code>partianim:setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0))\n</code></pre>"},{"location":"learning/particle-system/#velocity-initializer","title":"Velocity Initializer","text":"<p>It's the initial velocity of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0));\n</code></pre> <pre><code>partianim:setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0))\n</code></pre>"},{"location":"learning/particle-system/#acceleration-initializer","title":"Acceleration Initializer","text":"<p>It's to set inital acceleration of particle with this class.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setAccelerationInitializer(Vector3(0,100,0), Vector3(0,200,0));\n</code></pre> <pre><code>partianim:setAccelerationInitializer(Vector3(0,100,0), Vector3(0,200,0))\n</code></pre>"},{"location":"learning/particle-system/#color-initializer","title":"Color Initializer","text":"<p>Can be used to set initial color of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setColorInitializer(Vector3(0,0,0), Vector3(1,1,1));\n</code></pre> <pre><code>partianim:setColorInitializer(Vector3(0,0,0), Vector3(1,1,1))\n</code></pre>"},{"location":"learning/particle-system/#alpha-initializer","title":"Alpha Initializer","text":"<p>It can be used to set particle transparency. When set 0 is total transparent particle, when set 1.0 is total opaque particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setAlphaInitializer(0, 1);\n</code></pre> <pre><code>partianim:setAlphaInitializer(0, 1)\n</code></pre>"},{"location":"learning/particle-system/#size-initializer","title":"Size Initializer","text":"<p>Every particle can have its size. This class is used to set initial size of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setSizeInitializer(10, 50);\n</code></pre> <pre><code>partianim:setSizeInitializer(10, 50)\n</code></pre>"},{"location":"learning/particle-system/#sprite-initializer","title":"Sprite Initializer","text":"<p>A particle can also have behave like a sprite. The sprite of particle is set by an integer and during particle creation the initial sprite is sorted. In Supernova we call sprite as a rect of sprite sheet.</p> <code>C++</code> <code>Lua</code> <pre><code>std::vector&lt;int&gt; sprites;\nsprites.push_back(1);\nsprites.push_back(0);\nsprites.push_back(2);\npartianim.setSpriteIntializer(sprites);\n</code></pre> <pre><code>partianim:setSpriteIntializer({1, 0, 2})\n</code></pre>"},{"location":"learning/particle-system/#rotation-initializer","title":"Rotation Initializer","text":"<p>The initial rotation of particle is set with this class. The engine default is degress, but it can be changed.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setRotationInitializer(90, 90);\n</code></pre> <pre><code>partianim:setRotationInitializer(90, 90)\n</code></pre>"},{"location":"learning/screen-scaling/","title":"Screen scaling","text":"<p>To handle with the variety of resolutions and screen sizes of devices, Supernova have some options to choose the better scaling mode. All project code you must declare the size of canvas:</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setCanvasSize(1000,480);\n</code></pre> <pre><code>Engine.setCanvasSize(1000,480)\n</code></pre> <p>This is the base size you must use for design your project. For 3D projects this is used only for perspective view aspect, but for 2D projects this sizes are very important to positioning objects in screen.</p> <p>There are 6 types of scaling mode divided by 2 categories.</p>"},{"location":"learning/screen-scaling/#dynamic-canvas-size-modes","title":"Dynamic canvas size modes","text":""},{"location":"learning/screen-scaling/#fitwidth","title":"FitWidth","text":"<p>This is default mode. This keeps canvas width but floats height. Canvas can be changed from original format, but only height changes. Should be used <code>getPreferedCanvasWidth()</code>and <code>getPreferedCanvasHeight()</code> to get original canvas size.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::FITWIDTH);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::FITWIDTH\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#fitheight","title":"FitHeight","text":"<p>It is similar to FitWidth. This keeps canvas height but floats width. Canvas can be changed from original format, but only width changes. Should be used <code>getPreferedCanvasWidth()</code>and <code>getPreferedCanvasHeight()</code> to get original canvas size.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::FITHEIGHT);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::FITHEIGHT\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#native","title":"Native","text":"<p>This keeps canvas with native window resolution (width and height) and ignore canvas size by <code>setCanvasSize()</code>.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::NATIVE);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::NATIVE\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#static-canvas-size-modes","title":"Static canvas size modes","text":""},{"location":"learning/screen-scaling/#letterbox","title":"Letterbox","text":"<p>This keeps canvas width and height but empty spaces can be show on screen.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::LETTERBOX);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::LETTERBOX\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#crop","title":"Crop","text":"<p>This keeps canvas width and height but part of canvas can be out of screen (not in visible area).</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::CROP);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::CROP\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#stretch","title":"Stretch","text":"<p>This keeps canvas width and height but scene objects can deform.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::STRETCH);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::STRETCH\n</code></pre> <p></p>"}]}