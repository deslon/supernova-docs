{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Supernova Engine \u00b6 This is the official documentation and tutorials of Supernova Engine. Note Docs is under development. Entity component system Designed in modern architecture using pattern of \"entities\" with \"components\" of data. Simple and Fast Supernova doesn't have unnecessary stuffs like heavy GUI and extra processing. Lua or C++ You choose the best language is good for you. Lua and C++ can be used to make wonderful graphics and games. Cross-platform Write the code once and use it in Android, iOS, HTML5, Windows, Linux and MacOS. It runs native in each platform with OpenGL, Metal or DirectX. PBR shaders Very realistic shaders to make state-of-the-art graphics. Data oriented design Get rid all performance issues of Object Oriented Programming, arranging data to take improve of CPU caching. Sprites and animations A sprite object makes everything easy when working with animations . Dynamic shadows You can use many kind of lights with support for dynamic shadows. Getting started \u00b6 Creating a basic project Coordinate systems Building Supernova \u00b6 Building for Windows Building for Linux Building for maxOS Building for Android Building for iOS Building for HTML5 (Emscripten) Learning \u00b6 Screen scaling Object animation Particle system","title":"Introduction"},{"location":"#supernova-engine","text":"This is the official documentation and tutorials of Supernova Engine. Note Docs is under development. Entity component system Designed in modern architecture using pattern of \"entities\" with \"components\" of data. Simple and Fast Supernova doesn't have unnecessary stuffs like heavy GUI and extra processing. Lua or C++ You choose the best language is good for you. Lua and C++ can be used to make wonderful graphics and games. Cross-platform Write the code once and use it in Android, iOS, HTML5, Windows, Linux and MacOS. It runs native in each platform with OpenGL, Metal or DirectX. PBR shaders Very realistic shaders to make state-of-the-art graphics. Data oriented design Get rid all performance issues of Object Oriented Programming, arranging data to take improve of CPU caching. Sprites and animations A sprite object makes everything easy when working with animations . Dynamic shadows You can use many kind of lights with support for dynamic shadows.","title":"Supernova Engine"},{"location":"#getting-started","text":"Creating a basic project Coordinate systems","title":"Getting started"},{"location":"#building-supernova","text":"Building for Windows Building for Linux Building for maxOS Building for Android Building for iOS Building for HTML5 (Emscripten)","title":"Building Supernova"},{"location":"#learning","text":"Screen scaling Object animation Particle system","title":"Learning"},{"location":"getting-started/creating-a-basic-project/","text":"In this example we will create a simple triangle. The same sample code can be used in any platform. File organization tree \u00b6 engine core libs renders shaders platform android apple emscripten glfw sokol project (your project here) assets lua main.lua main.cpp tools bin binshaders shaderlib workspaces androidstudio xcode 1. Using C++ \u00b6 In Supernova file tree there is a main.cpp file located in project/ folder. This file is used to start the game development in C++. As you can see, there is a call for supernova.h , that will call init() function when game started. Edit it with the code: #include \"Supernova.h\" using namespace Supernova ; #include \"Polygon.h\" Scene scene ; Polygon triangle ( & scene ); void init (){ triangle . addVertex ( 0 , -100 ); triangle . addVertex ( -50 , 50 ); triangle . addVertex ( 50 , 50 ); triangle . setPosition ( Vector3 ( 300 , 300 , 0 )); triangle . setColor ( 0.6 , 0.2 , 0.6 , 1 ); Engine :: setCanvasSize ( 1000 , 480 ); Engine :: setScene ( & scene ); } 2. Using Lua \u00b6 In Supernova file tree there is a main.lua file located in project/lua/ folder. This file is used to start the game development in Lua. You can call any other Lua files by this. Edit it with the code: scene = Scene () triangle = Polygon ( scene ) triangle : addVertex ( 0 , - 100 ) triangle : addVertex ( - 50 , 50 ) triangle : addVertex ( Vector3 ( 50 , 50 , 0 )) triangle . position = Vector3 ( 300 , 300 , 0 ) triangle : setColor ( 0.6 , 0.2 , 0.6 , 1 ) Engine . setCanvasSize ( 1000 , 480 ) Engine . setScene ( scene ) Now you can run to see the result. Warning If you have both Lua and C++ calling Supernova static method setScene() , the last call will be from C++, so Lua code will not work. Use NO_CPP_INIT or NO_LUA_INIT macro to avoid init to be called.","title":"Creating a basic project"},{"location":"getting-started/creating-a-basic-project/#file-organization-tree","text":"engine core libs renders shaders platform android apple emscripten glfw sokol project (your project here) assets lua main.lua main.cpp tools bin binshaders shaderlib workspaces androidstudio xcode","title":"File organization tree"},{"location":"getting-started/creating-a-basic-project/#1-using-c","text":"In Supernova file tree there is a main.cpp file located in project/ folder. This file is used to start the game development in C++. As you can see, there is a call for supernova.h , that will call init() function when game started. Edit it with the code: #include \"Supernova.h\" using namespace Supernova ; #include \"Polygon.h\" Scene scene ; Polygon triangle ( & scene ); void init (){ triangle . addVertex ( 0 , -100 ); triangle . addVertex ( -50 , 50 ); triangle . addVertex ( 50 , 50 ); triangle . setPosition ( Vector3 ( 300 , 300 , 0 )); triangle . setColor ( 0.6 , 0.2 , 0.6 , 1 ); Engine :: setCanvasSize ( 1000 , 480 ); Engine :: setScene ( & scene ); }","title":"1. Using C++"},{"location":"getting-started/creating-a-basic-project/#2-using-lua","text":"In Supernova file tree there is a main.lua file located in project/lua/ folder. This file is used to start the game development in Lua. You can call any other Lua files by this. Edit it with the code: scene = Scene () triangle = Polygon ( scene ) triangle : addVertex ( 0 , - 100 ) triangle : addVertex ( - 50 , 50 ) triangle : addVertex ( Vector3 ( 50 , 50 , 0 )) triangle . position = Vector3 ( 300 , 300 , 0 ) triangle : setColor ( 0.6 , 0.2 , 0.6 , 1 ) Engine . setCanvasSize ( 1000 , 480 ) Engine . setScene ( scene ) Now you can run to see the result. Warning If you have both Lua and C++ calling Supernova static method setScene() , the last call will be from C++, so Lua code will not work. Use NO_CPP_INIT or NO_LUA_INIT macro to avoid init to be called.","title":"2. Using Lua"},{"location":"getting-started/building/building-for-android/","text":"For all platforms \u00b6 1. Clone Supernova project \u00b6 git clone https://github.com/supernovaengine/supernova.git 2. Download and install Android Studio \u00b6 Download latest version of Android Studio. Install it following instructions. 3. Open project using template \u00b6 Open Android Studio, click in Open an existing Android Studio project and select workspaces/android/ where Supernova was cloned. If asked to install Android NDK, CMake and or other addons, select yes.","title":"Building for Android"},{"location":"getting-started/building/building-for-android/#for-all-platforms","text":"","title":"For all platforms"},{"location":"getting-started/building/building-for-android/#1-clone-supernova-project","text":"git clone https://github.com/supernovaengine/supernova.git","title":"1. Clone Supernova project"},{"location":"getting-started/building/building-for-android/#2-download-and-install-android-studio","text":"Download latest version of Android Studio. Install it following instructions.","title":"2. Download and install Android Studio"},{"location":"getting-started/building/building-for-android/#3-open-project-using-template","text":"Open Android Studio, click in Open an existing Android Studio project and select workspaces/android/ where Supernova was cloned. If asked to install Android NDK, CMake and or other addons, select yes.","title":"3. Open project using template"},{"location":"getting-started/building/building-for-html5/","text":"For all platforms \u00b6 1. Clone Supernova project \u00b6 git clone https://github.com/supernovaengine/supernova.git 2. Download and install Emscripten \u00b6 Download Emscripten and follow install instructions . 3. Compile Supernova \u00b6 For Linux and OSX: \u00b6 Add Emscripten root path to a system environment variable: export $EMSCRIPTEN=<path_to_emscripten> For Windows: \u00b6 Download and install MinGW and CMake . Note MinGW and CMake must be in PATH environment variable of Windows. To test it, try to run mingw32-make and cmake in Prompt. For all platforms \u00b6 The directory where you clone Supernova go to: workspaces/emscripten/ execute in terminal: python3 supernova.py --build --platform web When finished you can see generated .js and .html files in build/web folder. Open with any browser. Warning Open .html locally can result some Javascript errors. You can use command python3 -m http.server to deploy a simple HTTP server and open in browser http://127.0.0.1:8000 .","title":"Building for HTML5"},{"location":"getting-started/building/building-for-html5/#for-all-platforms","text":"","title":"For all platforms"},{"location":"getting-started/building/building-for-html5/#1-clone-supernova-project","text":"git clone https://github.com/supernovaengine/supernova.git","title":"1. Clone Supernova project"},{"location":"getting-started/building/building-for-html5/#2-download-and-install-emscripten","text":"Download Emscripten and follow install instructions .","title":"2. Download and install Emscripten"},{"location":"getting-started/building/building-for-html5/#3-compile-supernova","text":"","title":"3. Compile Supernova"},{"location":"getting-started/building/building-for-html5/#for-linux-and-osx","text":"Add Emscripten root path to a system environment variable: export $EMSCRIPTEN=<path_to_emscripten>","title":"For Linux and OSX:"},{"location":"getting-started/building/building-for-html5/#for-windows","text":"Download and install MinGW and CMake . Note MinGW and CMake must be in PATH environment variable of Windows. To test it, try to run mingw32-make and cmake in Prompt.","title":"For Windows:"},{"location":"getting-started/building/building-for-html5/#for-all-platforms_1","text":"The directory where you clone Supernova go to: workspaces/emscripten/ execute in terminal: python3 supernova.py --build --platform web When finished you can see generated .js and .html files in build/web folder. Open with any browser. Warning Open .html locally can result some Javascript errors. You can use command python3 -m http.server to deploy a simple HTTP server and open in browser http://127.0.0.1:8000 .","title":"For all platforms"},{"location":"getting-started/building/building-for-ios/","text":"Only for OSX \u00b6 1. Clone Supernova project \u00b6 git clone https://github.com/supernovaengine/supernova.git 2. Download Xcode \u00b6 Using Mac App Store find Xcode . 3. Open project using template \u00b6 In Supernova directory, open Xcode project workspace in: workspaces/xcode/ . Select target Supernova iOS .","title":"Building for iOS"},{"location":"getting-started/building/building-for-ios/#only-for-osx","text":"","title":"Only for OSX"},{"location":"getting-started/building/building-for-ios/#1-clone-supernova-project","text":"git clone https://github.com/supernovaengine/supernova.git","title":"1. Clone Supernova project"},{"location":"getting-started/building/building-for-ios/#2-download-xcode","text":"Using Mac App Store find Xcode .","title":"2. Download Xcode"},{"location":"getting-started/building/building-for-ios/#3-open-project-using-template","text":"In Supernova directory, open Xcode project workspace in: workspaces/xcode/ . Select target Supernova iOS .","title":"3. Open project using template"},{"location":"getting-started/building/building-for-linux/","text":"1. Clone Supernova repo \u00b6 git clone https://github.com/supernovaengine/supernova.git 2. Install dependencies \u00b6 libglfw3-dev libxi-dev libxcursor-dev libgl1-mesa-dev ninja-build cmake 3. Build for Linux \u00b6 a. Using build tool \u00b6 In tools directory: python3 supernova.py --build --platform linux b. Using CMake \u00b6 In Supernova root directory: mkdir build mkdir instdir cmake \\ -S . \\ -B build \\ -DCMAKE_BUILD_TYPE=Debug \\ -G \"Ninja\" \\ -DCMAKE_INSTALL_PREFIX:PATH=instdir cmake --build build --config Debug --target supernova-project cmake --install build --config Debug --strip","title":"Building for Linux"},{"location":"getting-started/building/building-for-linux/#1-clone-supernova-repo","text":"git clone https://github.com/supernovaengine/supernova.git","title":"1. Clone Supernova repo"},{"location":"getting-started/building/building-for-linux/#2-install-dependencies","text":"libglfw3-dev libxi-dev libxcursor-dev libgl1-mesa-dev ninja-build cmake","title":"2. Install dependencies"},{"location":"getting-started/building/building-for-linux/#3-build-for-linux","text":"","title":"3. Build for Linux"},{"location":"getting-started/building/building-for-linux/#a-using-build-tool","text":"In tools directory: python3 supernova.py --build --platform linux","title":"a. Using build tool"},{"location":"getting-started/building/building-for-linux/#b-using-cmake","text":"In Supernova root directory: mkdir build mkdir instdir cmake \\ -S . \\ -B build \\ -DCMAKE_BUILD_TYPE=Debug \\ -G \"Ninja\" \\ -DCMAKE_INSTALL_PREFIX:PATH=instdir cmake --build build --config Debug --target supernova-project cmake --install build --config Debug --strip","title":"b. Using CMake"},{"location":"getting-started/building/building-for-macos/","text":"1. Clone Supernova repo \u00b6 git clone https://github.com/supernovaengine/supernova.git 2. Install dependencies \u00b6 cmake ninja 3. Build for macOS \u00b6 a. Using build tool \u00b6 In tools directory: python3 supernova.py --build --platform macos b. Using CMake \u00b6 In Supernova root directory: mkdir build mkdir instdir cmake \\ -S . \\ -B build \\ -DCMAKE_BUILD_TYPE=Debug \\ -G \"Ninja\" \\ -DCMAKE_INSTALL_PREFIX:PATH=instdir cmake --build build --config Debug --target supernova-project cmake --install build --config Debug --strip","title":"Building for macOS"},{"location":"getting-started/building/building-for-macos/#1-clone-supernova-repo","text":"git clone https://github.com/supernovaengine/supernova.git","title":"1. Clone Supernova repo"},{"location":"getting-started/building/building-for-macos/#2-install-dependencies","text":"cmake ninja","title":"2. Install dependencies"},{"location":"getting-started/building/building-for-macos/#3-build-for-macos","text":"","title":"3. Build for macOS"},{"location":"getting-started/building/building-for-macos/#a-using-build-tool","text":"In tools directory: python3 supernova.py --build --platform macos","title":"a. Using build tool"},{"location":"getting-started/building/building-for-macos/#b-using-cmake","text":"In Supernova root directory: mkdir build mkdir instdir cmake \\ -S . \\ -B build \\ -DCMAKE_BUILD_TYPE=Debug \\ -G \"Ninja\" \\ -DCMAKE_INSTALL_PREFIX:PATH=instdir cmake --build build --config Debug --target supernova-project cmake --install build --config Debug --strip","title":"b. Using CMake"},{"location":"getting-started/building/building-for-windows/","text":"1. Clone Supernova repo \u00b6 git clone https://github.com/supernovaengine/supernova.git 2. Install dependencies \u00b6 cmake 3. Build for Windows \u00b6 a. Using build tool \u00b6 In tools directory: python3 supernova.py --build --platform windows b. Using CMake \u00b6 In Supernova root directory: mkdir build mkdir instdir cmake \\ -S . \\ -B build \\ -DCMAKE_BUILD_TYPE=Debug \\ -G \"Visual Studio 17 2022\" \\ -DCMAKE_INSTALL_PREFIX:PATH=instdir cmake --build build --config Debug --target supernova-project cmake --install build --config Debug --strip","title":"Building for Windows"},{"location":"getting-started/building/building-for-windows/#1-clone-supernova-repo","text":"git clone https://github.com/supernovaengine/supernova.git","title":"1. Clone Supernova repo"},{"location":"getting-started/building/building-for-windows/#2-install-dependencies","text":"cmake","title":"2. Install dependencies"},{"location":"getting-started/building/building-for-windows/#3-build-for-windows","text":"","title":"3. Build for Windows"},{"location":"getting-started/building/building-for-windows/#a-using-build-tool","text":"In tools directory: python3 supernova.py --build --platform windows","title":"a. Using build tool"},{"location":"getting-started/building/building-for-windows/#b-using-cmake","text":"In Supernova root directory: mkdir build mkdir instdir cmake \\ -S . \\ -B build \\ -DCMAKE_BUILD_TYPE=Debug \\ -G \"Visual Studio 17 2022\" \\ -DCMAKE_INSTALL_PREFIX:PATH=instdir cmake --build build --config Debug --target supernova-project cmake --install build --config Debug --strip","title":"b. Using CMake"},{"location":"learning/coordinate-systems/","text":"Supernova uses the origin of coordinates at bottom-left for 2D and 3D projects and top-left for UI scenes. This image represents an abstract canvas: Under development...","title":"Coordinate systems"},{"location":"learning/object-animation/","text":"It`s possible to animate any object. This page explains how to make the animation work in many ways and ease functions. Animations in Supernova are made by Actions. These Actions can be used in almost all Scene objects. There are these types of actions: TimedAction PositionAction RotationAction ScaleAction ColorAction AlphaAction ParticlesAnimation SpriteAnimation Animation Action control \u00b6 Any kind of action can be controlled with these tree main methods: Method Description start() Start an Action ou resume if is paused. stop() Stop and reset it timestamp. pause() Pause an Action, could be resumed with run(). Action events \u00b6 Also, you can use actions with these callback events: Event Description onStart() When method Start() is called. onPause() When method pause() is called. onStop() When method stop() is called. TimedAction \u00b6 TimedAction is a generic type of action that has the values time and value . Both values can range from 0 to 1. The time is always fixed by a pre-defined duration, but value is calculated by an ease function. Value can be controlled by both pre-defined functions and user-defined functions. Getting value and time from Action: C++ Lua float time = action . getTime (); float value = action . getValue (); time = action : getTime () value = action : getValue () Components ActionComponent TimedActionComponent TimedAction cannot be called directly, it is necessary to specify some real action behavior. Next you can see an example using PositionAction : C++ Lua #include \"Supernova.h\" using namespace Supernova ; #include \"Polygon.h\" #include \"PositionAction.h\" Scene scene ; Polygon triangle ( & scene ); PositionAction action ( & scene ); void onMouseDown ( int button , float x , float y , int mods ); void init (){ triangle . addVertex ( 0 , -100 ); triangle . addVertex ( -50 , 50 ); triangle . addVertex ( 50 , 50 ); triangle . setPosition ( Vector3 ( 300 , 300 , 0 )); triangle . setColor ( 0.6 , 0.2 , 0.6 , 1 ); action . setFunctionType ( EaseType :: ELASTIC_IN_OUT ); action . setAction ( triangle . getPosition (), Vector3 ( 0 , 10 , 0 ), 2 , true ); action . setTarget ( triangle . getEntity ()); Engine :: setCanvasSize ( 1000 , 480 ); Engine :: setScene ( & scene ); Engine :: onMouseDown = onMouseDown ; } void onMouseDown ( int button , float x , float y , int mods ){ if ( action . isRunning ()) action . pause (); else action . start (); } scene = Scene () triangle = Polygon ( scene ) action = PositionAction ( scene ) triangle : addVertex ( 0 , - 100 ) triangle : addVertex ( - 50 , 50 ) triangle : addVertex ( Vector3 ( 50 , 50 , 0 )) triangle . position = Vector3 ( 300 , 300 , 0 ) triangle : setColor ( 0.6 , 0.2 , 0.6 , 1 ) action : setFunctionType ( EaseType . ELASTIC_IN_OUT ) action : setAction ( triangle . position , Vector3 ( 0 , 10 , 0 ), 2 , true ) action . target = triangle . entity Engine . setCanvasSize ( 1000 , 480 ) Engine . setScene ( scene ) function onMouseDown ( button , x , y , mods ) if ( action : isRunning ()) then action : pause () else action : start () end end Engine . onMouseDown = onMouseDown Pre-defined ease functions \u00b6 Linear \u00b6 C++ Lua action . setFunctionType ( EaseType :: LINEAR ); action : setFunctionType ( EaseType . LINEAR ) Quad \u00b6 C++ Lua action . setFunctionType ( EaseType :: QUAD_IN ); action . setFunctionType ( EaseType :: QUAD_OUT ); action . setFunctionType ( EaseType :: QUAD_IN_OUT ); action : setFunctionType ( EaseType . QUAD_IN ) action : setFunctionType ( EaseType . QUAD_OUT ) action : setFunctionType ( EaseType . QUAD_IN_OUT ) Cubic \u00b6 C++ Lua action . setFunctionType ( EaseType :: CUBIC_IN ); action . setFunctionType ( EaseType :: CUBIC_OUT ); action . setFunctionType ( EaseType :: CUBIC_IN_OUT ); action : setFunctionType ( EaseType . CUBIC_IN ) action : setFunctionType ( EaseType . CUBIC_OUT ) action : setFunctionType ( EaseType . CUBIC_IN_OUT ) Quart \u00b6 C++ Lua action . setFunctionType ( EaseType :: QUART_IN ); action . setFunctionType ( EaseType :: QUART_OUT ); action . setFunctionType ( EaseType :: QUART_IN_OUT ); action : setFunctionType ( EaseType . QUART_IN ) action : setFunctionType ( EaseType . QUART_OUT ) action : setFunctionType ( EaseType . QUART_IN_OUT ) Quint \u00b6 C++ Lua action . setFunctionType ( EaseType :: QUINT_IN ); action . setFunctionType ( EaseType :: QUINT_OUT ); action . setFunctionType ( EaseType :: QUINT_IN_OUT ); ``` lua action:setFunctionType(EaseType.QUINT_IN) action:setFunctionType(EaseType.QUINT_OUT) action:setFunctionType(EaseType.QUINT_IN_OUT) ``` Sine \u00b6 C++ Lua action . setFunctionType ( EaseType :: SINE_IN ); action . setFunctionType ( EaseType :: SINE_OUT ); action . setFunctionType ( EaseType :: SINE_IN_OUT ); action : setFunctionType ( EaseType . SINE_IN ) action : setFunctionType ( EaseType . SINE_OUT ) action : setFunctionType ( EaseType . SINE_IN_OUT ) Expo \u00b6 C++ Lua action . setFunctionType ( EaseType :: EXPO_IN ); action . setFunctionType ( EaseType :: EXPO_OUT ); action . setFunctionType ( EaseType :: EXPO_IN_OUT ); action : setFunctionType ( EaseType . EXPO_IN ) action : setFunctionType ( EaseType . EXPO_OUT ) action : setFunctionType ( EaseType . EXPO_IN_OUT ) Circ \u00b6 C++ Lua action . setFunctionType ( EaseType :: CIRC_IN ); action . setFunctionType ( EaseType :: CIRC_OUT ); action . setFunctionType ( EaseType :: CIRC_IN_OUT ); action : setFunctionType ( EaseType . CIRC_IN ) action : setFunctionType ( EaseType . CIRC_OUT ) action : setFunctionType ( EaseType . CIRC_IN_OUT ) Elastic \u00b6 C++ Lua action . setFunctionType ( EaseType :: ELASTIC_IN ); action . setFunctionType ( EaseType :: ELASTIC_OUT ); action . setFunctionType ( EaseType :: ELASTIC_IN_OUT ); action : setFunctionType ( EaseType . ELASTIC_IN ) action : setFunctionType ( EaseType . ELASTIC_OUT ) action : setFunctionType ( EaseType . ELASTIC_IN_OUT ) Back \u00b6 C++ Lua action . setFunctionType ( EaseType :: BACK_IN ); action . setFunctionType ( EaseType :: BACK_OUT ); action . setFunctionType ( EaseType :: BACK_IN_OUT ); action : setFunctionType ( EaseType . BACK_IN ) action : setFunctionType ( EaseType . BACK_OUT ) action : setFunctionType ( EaseType . BACK_IN_OUT ) Bounce \u00b6 C++ Lua action . setFunctionType ( EaseType :: BOUNCE_IN ); action . setFunctionType ( EaseType :: BOUNCE_OUT ); action . setFunctionType ( EaseType :: BOUNCE_IN_OUT ); action : setFunctionType ( EaseType . BOUNCE_IN ) action : setFunctionType ( EaseType . BOUNCE_OUT ) action : setFunctionType ( EaseType . BOUNCE_IN_OUT ) User-defined ease functions \u00b6 It's also possible to create new functions and attach it to a TimeAction. C++ Lua float newFunction ( float time ){ return time * 2 ; } action . getComponent < TimedActionComponent > (). function = newFunction ; function newFunction ( time ) return time * 2 end action : getTimedActionComponent (). function = newFunction PositionAction \u00b6 Is used to generate a movement in objects. Components ActionComponent TimedActionComponent PositionActionComponent C++ Lua PositionAction action ( & scene ); action . setAction ( Vector3 ( 100 , 200 , 0 ), Vector3 ( 0 , 10 , 0 ), 2 , false ); action = PositionAction ( scene ) action : setAction ( Vector3 ( 100 , 200 , 0 ), Vector3 ( 0 , 10 , 0 ), 2 , true ) RotationAction \u00b6 Is used to generate rotation in objects. Rotations are made by quaternions, but you can easily a create quaternions with angles. Components ActionComponent TimedActionComponent RotationActionComponent C++ Lua Quaternion fromAngle ; fromAngle . fromAngle ( 20 ); Quaternion toAngle ; toAngle . fromAngle ( 80 ); RotationAction action ( & scene ); action . setAction ( fromAngle , toAngle , 5 , true ); fromAngle = Quaternion () fromAngle : fromAngle ( 20 ) toAngle = Quaternion () toAngle : fromAngle ( 80 ) action = RotationAction ( scene ) action : setAction ( fromAngle , toAngle , 2 , true ) For default, a Quaternion method fromAngleAxis uses axis Z (for 2D projects) to perform a rotation, but it`s also possible to make rotations for any axis: C++ Lua fromAngle . fromAngleAxis ( 20 , Vector3 ( 0 , 1 , 0 )); fromAngle : fromAngleAxis ( 10 , Vector3 ( 0 , 1 , 0 )) ScaleAction \u00b6 Is used to change object scale. Scales are setting by Vector3. For example, if you want increase the object 3 times from Y axis you can use Vector3(1, 3, 1) . Components ActionComponent TimedActionComponent ScaleActionComponent C++ Lua ScaleAction action ( & scene ); action . setAction ( Vector3 ( 1 , 1 , 1 ), Vector3 ( 1 , 10 , 1 ), 2 , true ); action = ScaleAction ( scene ) action : setAction ( Vector3 ( 1 , 1 , 1 ), Vector3 ( 1 , 10 , 1 ), 2 , true ) ColorAction \u00b6 Is used to change the color of object. Components ActionComponent TimedActionComponent ColorActionComponent C++ Lua ColorAction action ( & scene ); action . setAction ( Vector3 ( 0 , 0.5 , 0.8 ), Vector3 ( 1 , 0.4 , 0 ), 5 , true ); action = ColorAction ( scene ) action : setAction ( Vector3 ( 0 , 0.5 , 0.8 ), Vector3 ( 1 , 0.4 , 0 ), 5 , true ) AlphaAction \u00b6 Is used to change alpha factor of object. Alpha 1.0 \u00e9 full opaque object and alpha 0.0 is full transparent object. Components ActionComponent TimedActionComponent AlphaActionComponent C++ Lua AlphaAction action ( & scene ); action . setAction ( 1 , 0 , 5 , true ); action = AlphaAction ( scene ) action : setAction ( 1 , 0 , 5 , true )","title":"Object animation"},{"location":"learning/object-animation/#action-control","text":"Any kind of action can be controlled with these tree main methods: Method Description start() Start an Action ou resume if is paused. stop() Stop and reset it timestamp. pause() Pause an Action, could be resumed with run().","title":"Action control"},{"location":"learning/object-animation/#action-events","text":"Also, you can use actions with these callback events: Event Description onStart() When method Start() is called. onPause() When method pause() is called. onStop() When method stop() is called.","title":"Action events"},{"location":"learning/object-animation/#timedaction","text":"TimedAction is a generic type of action that has the values time and value . Both values can range from 0 to 1. The time is always fixed by a pre-defined duration, but value is calculated by an ease function. Value can be controlled by both pre-defined functions and user-defined functions. Getting value and time from Action: C++ Lua float time = action . getTime (); float value = action . getValue (); time = action : getTime () value = action : getValue () Components ActionComponent TimedActionComponent TimedAction cannot be called directly, it is necessary to specify some real action behavior. Next you can see an example using PositionAction : C++ Lua #include \"Supernova.h\" using namespace Supernova ; #include \"Polygon.h\" #include \"PositionAction.h\" Scene scene ; Polygon triangle ( & scene ); PositionAction action ( & scene ); void onMouseDown ( int button , float x , float y , int mods ); void init (){ triangle . addVertex ( 0 , -100 ); triangle . addVertex ( -50 , 50 ); triangle . addVertex ( 50 , 50 ); triangle . setPosition ( Vector3 ( 300 , 300 , 0 )); triangle . setColor ( 0.6 , 0.2 , 0.6 , 1 ); action . setFunctionType ( EaseType :: ELASTIC_IN_OUT ); action . setAction ( triangle . getPosition (), Vector3 ( 0 , 10 , 0 ), 2 , true ); action . setTarget ( triangle . getEntity ()); Engine :: setCanvasSize ( 1000 , 480 ); Engine :: setScene ( & scene ); Engine :: onMouseDown = onMouseDown ; } void onMouseDown ( int button , float x , float y , int mods ){ if ( action . isRunning ()) action . pause (); else action . start (); } scene = Scene () triangle = Polygon ( scene ) action = PositionAction ( scene ) triangle : addVertex ( 0 , - 100 ) triangle : addVertex ( - 50 , 50 ) triangle : addVertex ( Vector3 ( 50 , 50 , 0 )) triangle . position = Vector3 ( 300 , 300 , 0 ) triangle : setColor ( 0.6 , 0.2 , 0.6 , 1 ) action : setFunctionType ( EaseType . ELASTIC_IN_OUT ) action : setAction ( triangle . position , Vector3 ( 0 , 10 , 0 ), 2 , true ) action . target = triangle . entity Engine . setCanvasSize ( 1000 , 480 ) Engine . setScene ( scene ) function onMouseDown ( button , x , y , mods ) if ( action : isRunning ()) then action : pause () else action : start () end end Engine . onMouseDown = onMouseDown","title":"TimedAction"},{"location":"learning/object-animation/#pre-defined-ease-functions","text":"","title":"Pre-defined ease functions"},{"location":"learning/object-animation/#linear","text":"C++ Lua action . setFunctionType ( EaseType :: LINEAR ); action : setFunctionType ( EaseType . LINEAR )","title":"Linear"},{"location":"learning/object-animation/#quad","text":"C++ Lua action . setFunctionType ( EaseType :: QUAD_IN ); action . setFunctionType ( EaseType :: QUAD_OUT ); action . setFunctionType ( EaseType :: QUAD_IN_OUT ); action : setFunctionType ( EaseType . QUAD_IN ) action : setFunctionType ( EaseType . QUAD_OUT ) action : setFunctionType ( EaseType . QUAD_IN_OUT )","title":"Quad"},{"location":"learning/object-animation/#cubic","text":"C++ Lua action . setFunctionType ( EaseType :: CUBIC_IN ); action . setFunctionType ( EaseType :: CUBIC_OUT ); action . setFunctionType ( EaseType :: CUBIC_IN_OUT ); action : setFunctionType ( EaseType . CUBIC_IN ) action : setFunctionType ( EaseType . CUBIC_OUT ) action : setFunctionType ( EaseType . CUBIC_IN_OUT )","title":"Cubic"},{"location":"learning/object-animation/#quart","text":"C++ Lua action . setFunctionType ( EaseType :: QUART_IN ); action . setFunctionType ( EaseType :: QUART_OUT ); action . setFunctionType ( EaseType :: QUART_IN_OUT ); action : setFunctionType ( EaseType . QUART_IN ) action : setFunctionType ( EaseType . QUART_OUT ) action : setFunctionType ( EaseType . QUART_IN_OUT )","title":"Quart"},{"location":"learning/object-animation/#quint","text":"C++ Lua action . setFunctionType ( EaseType :: QUINT_IN ); action . setFunctionType ( EaseType :: QUINT_OUT ); action . setFunctionType ( EaseType :: QUINT_IN_OUT ); ``` lua action:setFunctionType(EaseType.QUINT_IN) action:setFunctionType(EaseType.QUINT_OUT) action:setFunctionType(EaseType.QUINT_IN_OUT) ```","title":"Quint"},{"location":"learning/object-animation/#sine","text":"C++ Lua action . setFunctionType ( EaseType :: SINE_IN ); action . setFunctionType ( EaseType :: SINE_OUT ); action . setFunctionType ( EaseType :: SINE_IN_OUT ); action : setFunctionType ( EaseType . SINE_IN ) action : setFunctionType ( EaseType . SINE_OUT ) action : setFunctionType ( EaseType . SINE_IN_OUT )","title":"Sine"},{"location":"learning/object-animation/#expo","text":"C++ Lua action . setFunctionType ( EaseType :: EXPO_IN ); action . setFunctionType ( EaseType :: EXPO_OUT ); action . setFunctionType ( EaseType :: EXPO_IN_OUT ); action : setFunctionType ( EaseType . EXPO_IN ) action : setFunctionType ( EaseType . EXPO_OUT ) action : setFunctionType ( EaseType . EXPO_IN_OUT )","title":"Expo"},{"location":"learning/object-animation/#circ","text":"C++ Lua action . setFunctionType ( EaseType :: CIRC_IN ); action . setFunctionType ( EaseType :: CIRC_OUT ); action . setFunctionType ( EaseType :: CIRC_IN_OUT ); action : setFunctionType ( EaseType . CIRC_IN ) action : setFunctionType ( EaseType . CIRC_OUT ) action : setFunctionType ( EaseType . CIRC_IN_OUT )","title":"Circ"},{"location":"learning/object-animation/#elastic","text":"C++ Lua action . setFunctionType ( EaseType :: ELASTIC_IN ); action . setFunctionType ( EaseType :: ELASTIC_OUT ); action . setFunctionType ( EaseType :: ELASTIC_IN_OUT ); action : setFunctionType ( EaseType . ELASTIC_IN ) action : setFunctionType ( EaseType . ELASTIC_OUT ) action : setFunctionType ( EaseType . ELASTIC_IN_OUT )","title":"Elastic"},{"location":"learning/object-animation/#back","text":"C++ Lua action . setFunctionType ( EaseType :: BACK_IN ); action . setFunctionType ( EaseType :: BACK_OUT ); action . setFunctionType ( EaseType :: BACK_IN_OUT ); action : setFunctionType ( EaseType . BACK_IN ) action : setFunctionType ( EaseType . BACK_OUT ) action : setFunctionType ( EaseType . BACK_IN_OUT )","title":"Back"},{"location":"learning/object-animation/#bounce","text":"C++ Lua action . setFunctionType ( EaseType :: BOUNCE_IN ); action . setFunctionType ( EaseType :: BOUNCE_OUT ); action . setFunctionType ( EaseType :: BOUNCE_IN_OUT ); action : setFunctionType ( EaseType . BOUNCE_IN ) action : setFunctionType ( EaseType . BOUNCE_OUT ) action : setFunctionType ( EaseType . BOUNCE_IN_OUT )","title":"Bounce"},{"location":"learning/object-animation/#user-defined-ease-functions","text":"It's also possible to create new functions and attach it to a TimeAction. C++ Lua float newFunction ( float time ){ return time * 2 ; } action . getComponent < TimedActionComponent > (). function = newFunction ; function newFunction ( time ) return time * 2 end action : getTimedActionComponent (). function = newFunction","title":"User-defined ease functions"},{"location":"learning/object-animation/#positionaction","text":"Is used to generate a movement in objects. Components ActionComponent TimedActionComponent PositionActionComponent C++ Lua PositionAction action ( & scene ); action . setAction ( Vector3 ( 100 , 200 , 0 ), Vector3 ( 0 , 10 , 0 ), 2 , false ); action = PositionAction ( scene ) action : setAction ( Vector3 ( 100 , 200 , 0 ), Vector3 ( 0 , 10 , 0 ), 2 , true )","title":"PositionAction"},{"location":"learning/object-animation/#rotationaction","text":"Is used to generate rotation in objects. Rotations are made by quaternions, but you can easily a create quaternions with angles. Components ActionComponent TimedActionComponent RotationActionComponent C++ Lua Quaternion fromAngle ; fromAngle . fromAngle ( 20 ); Quaternion toAngle ; toAngle . fromAngle ( 80 ); RotationAction action ( & scene ); action . setAction ( fromAngle , toAngle , 5 , true ); fromAngle = Quaternion () fromAngle : fromAngle ( 20 ) toAngle = Quaternion () toAngle : fromAngle ( 80 ) action = RotationAction ( scene ) action : setAction ( fromAngle , toAngle , 2 , true ) For default, a Quaternion method fromAngleAxis uses axis Z (for 2D projects) to perform a rotation, but it`s also possible to make rotations for any axis: C++ Lua fromAngle . fromAngleAxis ( 20 , Vector3 ( 0 , 1 , 0 )); fromAngle : fromAngleAxis ( 10 , Vector3 ( 0 , 1 , 0 ))","title":"RotationAction"},{"location":"learning/object-animation/#scaleaction","text":"Is used to change object scale. Scales are setting by Vector3. For example, if you want increase the object 3 times from Y axis you can use Vector3(1, 3, 1) . Components ActionComponent TimedActionComponent ScaleActionComponent C++ Lua ScaleAction action ( & scene ); action . setAction ( Vector3 ( 1 , 1 , 1 ), Vector3 ( 1 , 10 , 1 ), 2 , true ); action = ScaleAction ( scene ) action : setAction ( Vector3 ( 1 , 1 , 1 ), Vector3 ( 1 , 10 , 1 ), 2 , true )","title":"ScaleAction"},{"location":"learning/object-animation/#coloraction","text":"Is used to change the color of object. Components ActionComponent TimedActionComponent ColorActionComponent C++ Lua ColorAction action ( & scene ); action . setAction ( Vector3 ( 0 , 0.5 , 0.8 ), Vector3 ( 1 , 0.4 , 0 ), 5 , true ); action = ColorAction ( scene ) action : setAction ( Vector3 ( 0 , 0.5 , 0.8 ), Vector3 ( 1 , 0.4 , 0 ), 5 , true )","title":"ColorAction"},{"location":"learning/object-animation/#alphaaction","text":"Is used to change alpha factor of object. Alpha 1.0 \u00e9 full opaque object and alpha 0.0 is full transparent object. Components ActionComponent TimedActionComponent AlphaActionComponent C++ Lua AlphaAction action ( & scene ); action . setAction ( 1 , 0 , 5 , true ); action = AlphaAction ( scene ) action : setAction ( 1 , 0 , 5 , true )","title":"AlphaAction"},{"location":"learning/particle-system/","text":"In Supernova to use particle system you have to create two kind of objects: Particle Initializers and Particle Modifiers. Particle Initializers ParticleLifeInit ParticlePositionInit ParticleRotationInit ParticleAlphaInit ParticleColorInit ParticleSizeInit ParticleSpriteInit ParticleVelocityInit ParticleAccelerationInit Particle Modifiers ParticleAlphaMod ParticleColorMod ParticlePositionMod ParticleRotationMod ParticleSizeMod ParticleSpriteMod ParticleVelocityMod Here is an example how Inittializers and Modifiers can be used to create particles animation. C++ Lua #include \"Supernova.h\" #include \"Scene.h\" #include \"Particles.h\" #include \"ParticlesAnimation.h\" #include \"ParticleLifeInit.h\" #include \"ParticleSizeInit.h\" #include \"ParticleVelocityInit.h\" #include \"ParticleColorMod.h\" #include \"ParticleRotationMod.h\" using namespace Supernova ; Scene scene ; Particles * particles ; ParticlesAnimation * particlesanim ; void init (){ Engine :: setCanvasSize ( 1000 , 480 ); particles = new Particles (); particlesanim = new ParticlesAnimation (); particles -> setRate ( 10 ); particles -> setMaxParticles ( 100 );; particles -> setTexture ( \"f4.png\" ); particles -> setPosition ( 200 , 200 , 0 ); particles -> addAction ( particlesanim ); particlesanim -> addInit ( new ParticleLifeInit ( 10 , 10 )); particlesanim -> addInit ( new ParticleSizeInit ( 50 , 100 )); particlesanim -> addInit ( new ParticleVelocityInit ( Vector3 ( -15 , -4 , 0 ), Vector3 ( 15 , 24 , 0 ))); particlesanim -> addMod ( new ParticleColorMod ( 10 , 0 , 0 , 1 , 0 , 1 , 0 , 0 )); particlesanim -> addMod ( new ParticleRotationMod ( 9 , 1 , 0 , 180 )); particlesanim -> run (); scene . addObject ( particles ); Engine :: setScene ( & scene ); } Engine . setCanvasSize ( 1000 , 480 ) scene = Scene () particles = Particles () particlesanim = ParticlesAnimation () particles : setRate ( 10 ) particles : setMaxParticles ( 100 ) particles : setTexture ( \"f4.png\" ) particles : setPosition ( 200 , 200 , 0 ) particles : addAction ( particlesanim ) particlesanim : addInit ( ParticleLifeInit ( 10 , 10 )) particlesanim : addInit ( ParticleSizeInit ( 50 , 100 )) particlesanim : addInit ( ParticleVelocityInit ( Vector3 ( - 15 , - 4 , 0 ), Vector3 ( 15 , 24 , 0 ))) particlesanim : addMod ( ParticleColorMod ( 10 , 0 , 0 , 1 , 0 , 1 , 0 , 0 )) particlesanim : addMod ( ParticleRotationMod ( 9 , 1 , 0 , 180 )) particlesanim : run () scene : addObject ( particles ) Engine . setScene ( scene ) Particle Initializers \u00b6 ParticleLifeInit \u00b6 Every particle has its life and this life is regressive. When a particle starts, through this class you can set the lifetime of it. Throughout the life of the particle, when it reaches 0, the particle dies. Class default constructor: ParticleLifeInit(float minLife, float maxLife) particlesanim -> addInit ( new ParticleLifeInit ( 10 , 10 )); particlesanim : addInit ( ParticleLifeInit ( 10 , 10 )) ParticlePositionInit \u00b6 The inittial position of particle is set with this class. Class default constructor: ParticlePositionInit(Vector3 minPosition, Vector3 maxPosition) particlesanim -> addInit ( new ParticlePositionInit ( Vector3 ( 100 , 0 , 0 ), Vector3 ( 100 , 100 , 0 ))); particlesanim : addInit ( ParticlePositionInit ( Vector3 ( 100 , 0 , 0 ), Vector3 ( 100 , 100 , 0 ))) ParticleRotationInit \u00b6 The inittial rotation of particle is set with this class. The engine default is degress, but it can be changed. Class default constructor: ParticleRotationInit(float minRotation, float maxRotation) particlesanim -> addInit ( new ParticleRotationInit ( 0 , 180 )); particlesanim : addInit ( ParticleRotationInit ( 0 , 180 )) ParticleAlphaInit \u00b6 It can be used to set particle transparency. When set 0 is total transparent particle, when set 1 is total opaque particle. Class default constructor: ParticleAlphaInit(float minAlpha, float maxAlpha) particlesanim -> addInit ( new ParticleAlphaInit ( 0 , 0.5 )) particlesanim : addInit ( ParticleAlphaInit ( 0 , 0.5 )) ParticleColorInit \u00b6 Can be used to set inittial color of particle. Class default constructor: ParticleColorInit(float minRed, float minGreen, float minBlue, float maxRed, float maxGreen, float maxBlue) particlesanim -> addInit ( new ParticleColorInit ( 0 , 0 , 0 , 1 , 1 , 0 )) particlesanim : addInit ( ParticleColorInit ( 0 , 0 , 0 , 1 , 1 , 0 )) ParticleSizeInit \u00b6 Every particle can have its size. This class is used to set inittial size of particle. Class default constructor: ParticleSizeInit(float minSize, float maxSize) particlesanim -> addInit ( new ParticleSizeInit ( 50 , 100 )) particlesanim : addInit ( ParticleSizeInit ( 50 , 100 )) ParticleSpriteInit \u00b6 A particle can also have a sprite. The sprite of particle is set by an integer and during particle creation the inittial sprite is sorted. In Supernova we call sprite as a rect of sprite sheet. More details you can see in sprite section. Class default constructor: ParticleSpriteInit(std::vector frames) std :: vector < int > sprites ; sprites . push_back ( 1 ); sprites . push_back ( 0 ); sprites . push_back ( 2 ); particlesanim -> addInit ( new ParticleSpriteInit ( sprites )); particlesanim -> addInit ( ParticleSpriteInit ({ 1 , 0 , 2 })); ParticleVelocityInit \u00b6 It's the inittial velocity of particle. Class default constructor: ParticleVelocityInit(Vector3 minVelocity, Vector3 maxVelocity) particlesanim -> addInit ( new ParticleVelocityInit ( Vector3 ( -15 , -4 , 0 ), Vector3 ( 15 , 24 , 0 ))) particlesanim : addInit ( ParticleVelocityInit ( Vector3 ( - 15 , - 4 , 0 ), Vector3 ( 15 , 24 , 0 ))) ParticleAccelerationInit \u00b6 It's to set inittal acceleration of particle with this class. Class default constructor: ParticleAccelerationInit(Vector3 minAcceleration, Vector3 maxAcceleration) particlesanim -> addInit ( new ParticleAccelerationInit ( Vector3 ( 0.0f , 9.81f * 5 , 0.0f ), Vector3 ( 0.0f , 9.81f * 5 , 0.0f ))); particlesanim : addInit ( ParticleAccelerationInit ( Vector3 ( 0.0 f , 9.81 f * 5 , 0.0 f ), Vector3 ( 0.0 f , 9.81 f * 5 , 0.0 f )))","title":"Particle system"},{"location":"learning/particle-system/#particle-initializers","text":"","title":"Particle Initializers"},{"location":"learning/particle-system/#particlelifeinit","text":"Every particle has its life and this life is regressive. When a particle starts, through this class you can set the lifetime of it. Throughout the life of the particle, when it reaches 0, the particle dies. Class default constructor: ParticleLifeInit(float minLife, float maxLife) particlesanim -> addInit ( new ParticleLifeInit ( 10 , 10 )); particlesanim : addInit ( ParticleLifeInit ( 10 , 10 ))","title":"ParticleLifeInit"},{"location":"learning/particle-system/#particlepositioninit","text":"The inittial position of particle is set with this class. Class default constructor: ParticlePositionInit(Vector3 minPosition, Vector3 maxPosition) particlesanim -> addInit ( new ParticlePositionInit ( Vector3 ( 100 , 0 , 0 ), Vector3 ( 100 , 100 , 0 ))); particlesanim : addInit ( ParticlePositionInit ( Vector3 ( 100 , 0 , 0 ), Vector3 ( 100 , 100 , 0 )))","title":"ParticlePositionInit"},{"location":"learning/particle-system/#particlerotationinit","text":"The inittial rotation of particle is set with this class. The engine default is degress, but it can be changed. Class default constructor: ParticleRotationInit(float minRotation, float maxRotation) particlesanim -> addInit ( new ParticleRotationInit ( 0 , 180 )); particlesanim : addInit ( ParticleRotationInit ( 0 , 180 ))","title":"ParticleRotationInit"},{"location":"learning/particle-system/#particlealphainit","text":"It can be used to set particle transparency. When set 0 is total transparent particle, when set 1 is total opaque particle. Class default constructor: ParticleAlphaInit(float minAlpha, float maxAlpha) particlesanim -> addInit ( new ParticleAlphaInit ( 0 , 0.5 )) particlesanim : addInit ( ParticleAlphaInit ( 0 , 0.5 ))","title":"ParticleAlphaInit"},{"location":"learning/particle-system/#particlecolorinit","text":"Can be used to set inittial color of particle. Class default constructor: ParticleColorInit(float minRed, float minGreen, float minBlue, float maxRed, float maxGreen, float maxBlue) particlesanim -> addInit ( new ParticleColorInit ( 0 , 0 , 0 , 1 , 1 , 0 )) particlesanim : addInit ( ParticleColorInit ( 0 , 0 , 0 , 1 , 1 , 0 ))","title":"ParticleColorInit"},{"location":"learning/particle-system/#particlesizeinit","text":"Every particle can have its size. This class is used to set inittial size of particle. Class default constructor: ParticleSizeInit(float minSize, float maxSize) particlesanim -> addInit ( new ParticleSizeInit ( 50 , 100 )) particlesanim : addInit ( ParticleSizeInit ( 50 , 100 ))","title":"ParticleSizeInit"},{"location":"learning/particle-system/#particlespriteinit","text":"A particle can also have a sprite. The sprite of particle is set by an integer and during particle creation the inittial sprite is sorted. In Supernova we call sprite as a rect of sprite sheet. More details you can see in sprite section. Class default constructor: ParticleSpriteInit(std::vector frames) std :: vector < int > sprites ; sprites . push_back ( 1 ); sprites . push_back ( 0 ); sprites . push_back ( 2 ); particlesanim -> addInit ( new ParticleSpriteInit ( sprites )); particlesanim -> addInit ( ParticleSpriteInit ({ 1 , 0 , 2 }));","title":"ParticleSpriteInit"},{"location":"learning/particle-system/#particlevelocityinit","text":"It's the inittial velocity of particle. Class default constructor: ParticleVelocityInit(Vector3 minVelocity, Vector3 maxVelocity) particlesanim -> addInit ( new ParticleVelocityInit ( Vector3 ( -15 , -4 , 0 ), Vector3 ( 15 , 24 , 0 ))) particlesanim : addInit ( ParticleVelocityInit ( Vector3 ( - 15 , - 4 , 0 ), Vector3 ( 15 , 24 , 0 )))","title":"ParticleVelocityInit"},{"location":"learning/particle-system/#particleaccelerationinit","text":"It's to set inittal acceleration of particle with this class. Class default constructor: ParticleAccelerationInit(Vector3 minAcceleration, Vector3 maxAcceleration) particlesanim -> addInit ( new ParticleAccelerationInit ( Vector3 ( 0.0f , 9.81f * 5 , 0.0f ), Vector3 ( 0.0f , 9.81f * 5 , 0.0f ))); particlesanim : addInit ( ParticleAccelerationInit ( Vector3 ( 0.0 f , 9.81 f * 5 , 0.0 f ), Vector3 ( 0.0 f , 9.81 f * 5 , 0.0 f )))","title":"ParticleAccelerationInit"},{"location":"learning/screen-scaling/","text":"To handle with the variety of resolutions and screen sizes of devices, Supernova have some options to choose the better scaling mode. All project code you must declare the size of canvas: C++ Lua Engine :: setCanvasSize ( 1000 , 480 ); Engine . setCanvasSize ( 1000 , 480 ) This is the base size you must use for design your project. For 3D projects this is used only for perspective view aspect, but for 2D projects this sizes are very important to positioning objects in screen. There are 6 types of scaling mode divided by 2 categories. Dynamic canvas size modes \u00b6 FitWidth \u00b6 This is default mode. This keeps canvas width but floats height. Canvas can be changed from original format, but only height changes. Should be used getPreferedCanvasWidth() and getPreferedCanvasHeight() to get original canvas size. C++ Lua Engine :: setScalingMode ( Scaling :: FITWIDTH ); Engine . scalingMode = Scaling :: FITWIDTH FitHeight \u00b6 It is similar to FitWidth. This keeps canvas height but floats width. Canvas can be changed from original format, but only width changes. Should be used getPreferedCanvasWidth() and getPreferedCanvasHeight() to get original canvas size. C++ Lua Engine :: setScalingMode ( Scaling :: FITHEIGHT ); Engine . scalingMode = Scaling :: FITHEIGHT Native \u00b6 This keeps canvas with native window resolution (width and height) and ignore canvas size by setCanvasSize() . C++ Lua Engine :: setScalingMode ( Scaling :: NATIVE ); Engine . scalingMode = Scaling :: NATIVE Static canvas size modes \u00b6 Letterbox \u00b6 This keeps canvas width and height but empty spaces can be show on screen. C++ Lua Engine :: setScalingMode ( Scaling :: LETTERBOX ); Engine . scalingMode = Scaling :: LETTERBOX Crop \u00b6 This keeps canvas width and height but part of canvas can be out of screen (not in visible area). C++ Lua Engine :: setScalingMode ( Scaling :: CROP ); Engine . scalingMode = Scaling :: CROP Stretch \u00b6 This keeps canvas width and height but scene objects can deform. C++ Lua Engine :: setScalingMode ( Scaling :: STRETCH ); Engine . scalingMode = Scaling :: STRETCH","title":"Screen scaling"},{"location":"learning/screen-scaling/#dynamic-canvas-size-modes","text":"","title":"Dynamic canvas size modes"},{"location":"learning/screen-scaling/#fitwidth","text":"This is default mode. This keeps canvas width but floats height. Canvas can be changed from original format, but only height changes. Should be used getPreferedCanvasWidth() and getPreferedCanvasHeight() to get original canvas size. C++ Lua Engine :: setScalingMode ( Scaling :: FITWIDTH ); Engine . scalingMode = Scaling :: FITWIDTH","title":"FitWidth"},{"location":"learning/screen-scaling/#fitheight","text":"It is similar to FitWidth. This keeps canvas height but floats width. Canvas can be changed from original format, but only width changes. Should be used getPreferedCanvasWidth() and getPreferedCanvasHeight() to get original canvas size. C++ Lua Engine :: setScalingMode ( Scaling :: FITHEIGHT ); Engine . scalingMode = Scaling :: FITHEIGHT","title":"FitHeight"},{"location":"learning/screen-scaling/#native","text":"This keeps canvas with native window resolution (width and height) and ignore canvas size by setCanvasSize() . C++ Lua Engine :: setScalingMode ( Scaling :: NATIVE ); Engine . scalingMode = Scaling :: NATIVE","title":"Native"},{"location":"learning/screen-scaling/#static-canvas-size-modes","text":"","title":"Static canvas size modes"},{"location":"learning/screen-scaling/#letterbox","text":"This keeps canvas width and height but empty spaces can be show on screen. C++ Lua Engine :: setScalingMode ( Scaling :: LETTERBOX ); Engine . scalingMode = Scaling :: LETTERBOX","title":"Letterbox"},{"location":"learning/screen-scaling/#crop","text":"This keeps canvas width and height but part of canvas can be out of screen (not in visible area). C++ Lua Engine :: setScalingMode ( Scaling :: CROP ); Engine . scalingMode = Scaling :: CROP","title":"Crop"},{"location":"learning/screen-scaling/#stretch","text":"This keeps canvas width and height but scene objects can deform. C++ Lua Engine :: setScalingMode ( Scaling :: STRETCH ); Engine . scalingMode = Scaling :: STRETCH","title":"Stretch"}]}