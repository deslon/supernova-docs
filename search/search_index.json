{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Supernova Engine","text":"<p>This is the official documentation and tutorials of Supernova Engine.</p> <p>Note</p> <p>Docs are under development.</p> Entity component system <p>Designed in modern architecture using pattern of \"entities\" with \"components\" of data.</p> Simple and Fast <p>Supernova doesn't have unnecessary stuffs like heavy GUI and extra processing.</p> Lua or C++ <p>You choose the best language is good for you. Lua and C++ can be used to make wonderful graphics and games.</p> Cross-platform <p>Write the code once and use it in Android, iOS, HTML5, Windows, Linux and MacOS. It runs native in each platform with OpenGL, Metal or DirectX.  </p> PBR shaders <p>Very realistic shaders to make state-of-the-art graphics.</p> Data oriented design <p>Get rid all performance issues of Object Oriented Programming, arranging data to take improve of CPU caching.</p> Sprites and animations <p>A sprite object makes everything easy when working with animations.</p> Dynamic shadows <p>You can use many kind of lights with support for dynamic shadows.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>Creating a basic project Coordinate systems </p>"},{"location":"#building-supernova","title":"Building Supernova","text":"<p>Building for Windows Building for Linux Building for maxOS Building for Android Building for iOS Building for HTML5 (Emscripten)</p>"},{"location":"#learning","title":"Learning","text":"<p>Screen scaling Object animation Particle system </p>"},{"location":"getting-started/creating-a-basic-project/","title":"Creating a basic project","text":"<p>In this example we will create a simple triangle. The same sample code can be used in any platform.</p>"},{"location":"getting-started/creating-a-basic-project/#file-organization-tree","title":"File organization tree","text":"<ul> <li> engine<ul> <li> core</li> <li> libs</li> <li> renders</li> <li> shaders</li> </ul> </li> <li> platform<ul> <li> android</li> <li> apple</li> <li> emscripten</li> <li> glfw</li> <li> sokol</li> </ul> </li> <li> project <code>(your project here)</code><ul> <li> assets</li> <li> lua<ul> <li> main.lua</li> </ul> </li> <li> main.cpp</li> </ul> </li> <li> tools<ul> <li> bin</li> <li> binshaders</li> <li> shaderlib</li> </ul> </li> <li> workspaces<ul> <li> androidstudio</li> <li> xcode</li> </ul> </li> </ul>"},{"location":"getting-started/creating-a-basic-project/#1-using-c","title":"1. Using C++","text":"<p>In Supernova file tree there is a <code>main.cpp</code> file located in <code>project/</code> folder. This file is used to start the game development in C++. As you can see, there is a call for <code>supernova.h</code>, that will call <code>init()</code> function when game started.</p> <p>Edit it with the code:</p> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Polygon.h\"\n\nScene scene;\nPolygon triangle(&amp;scene);\n\nvoid init(){\ntriangle.addVertex(0, -100);\ntriangle.addVertex(-50, 50);\ntriangle.addVertex(50, 50);\n\ntriangle.setPosition(Vector3(300,300,0));\ntriangle.setColor(0.6, 0.2, 0.6, 1);\n\nEngine::setCanvasSize(1000,480);\nEngine::setScene(&amp;scene);\n}\n</code></pre>"},{"location":"getting-started/creating-a-basic-project/#2-using-lua","title":"2. Using Lua","text":"<p>In Supernova file tree there is a <code>main.lua</code> file located in <code>project/lua/</code> folder. This file is used to start the game development in Lua. You can call any other Lua files by this.</p> <p>Edit it with the code:</p> <pre><code>scene = Scene()\ntriangle = Polygon(scene)\n\ntriangle:addVertex(0, -100)\ntriangle:addVertex(-50, 50)\ntriangle:addVertex(Vector3(50, 50,0))\n\ntriangle.position = Vector3(300,300,0)\ntriangle:setColor(0.6, 0.2, 0.6, 1)\n\nEngine.setCanvasSize(1000,480)\nEngine.setScene(scene)\n</code></pre> <p>Now you can run to see the result.</p> <p>Warning</p> <p>If you have both Lua and C++ calling Supernova static method <code>setScene()</code>, the last call will be from C++, so Lua code will not work. Use <code>NO_CPP_INIT</code> or <code>NO_LUA_INIT</code> macro to avoid init to be called.</p> <p>For example, to build with <code>NO_CPP_INIT</code>:</p> <ul> <li>CMake: <code>cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -DNO_CPP_INIT=1 -G \"Visual Studio 17 2022\" -DCMAKE_INSTALL_PREFIX:PATH=instdir</code> </li> <li>Build tool: <code>python3 supernova.py --build --platform windows --no-cpp-init</code></li> </ul> <p>See Building for more.</p>"},{"location":"getting-started/creating-a-basic-project/#3-running-the-project","title":"3. Running the Project","text":"<p>Considering you have built and installed the project, you can run it by going to <code>instdir/bin</code> and opening the executable there.</p> <p>After you make changes to the code, you have to build and install it again.</p>"},{"location":"getting-started/building/building-for-android/","title":"Building for Android","text":""},{"location":"getting-started/building/building-for-android/#for-all-platforms","title":"For all platforms","text":""},{"location":"getting-started/building/building-for-android/#1-clone-supernova-project","title":"1. Clone Supernova project","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-android/#2-download-and-install-android-studio","title":"2. Download and install Android Studio","text":"<p>Download latest version of Android Studio.</p> <p>Install it following instructions.</p>"},{"location":"getting-started/building/building-for-android/#3-open-project-using-template","title":"3. Open project using template","text":"<p>Open Android Studio, click in <code>Open an existing Android Studio project</code> and select <code>workspaces/android/</code> where Supernova was cloned.</p> <p>If asked to install Android NDK, CMake and or other addons, select yes.</p>"},{"location":"getting-started/building/building-for-html5/","title":"Building for HTML5","text":""},{"location":"getting-started/building/building-for-html5/#for-all-platforms","title":"For all platforms","text":""},{"location":"getting-started/building/building-for-html5/#1-clone-supernova-project","title":"1. Clone Supernova project","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-html5/#2-download-and-install-emscripten","title":"2. Download and install Emscripten","text":"<p>Download Emscripten and follow install instructions.</p>"},{"location":"getting-started/building/building-for-html5/#3-compile-supernova","title":"3. Compile Supernova","text":""},{"location":"getting-started/building/building-for-html5/#for-linux-and-osx","title":"For Linux and OSX:","text":"<p>Add Emscripten root path to a system environment variable:</p> <p><code>export $EMSCRIPTEN=&lt;path_to_emscripten&gt;</code></p>"},{"location":"getting-started/building/building-for-html5/#for-windows","title":"For Windows:","text":"<p>Download and install MinGW and CMake.</p> <p>Note</p> <p>MinGW and CMake must be in PATH environment variable of Windows. To test it, try to run <code>mingw32-make</code> and <code>cmake</code> in Prompt.</p>"},{"location":"getting-started/building/building-for-html5/#for-all-platforms_1","title":"For all platforms","text":"<p>The directory where you clone Supernova go to: <code>workspaces/emscripten/</code> execute in terminal:</p> <pre><code>python3 supernova.py --build --platform web\n</code></pre> <p>When finished you can see generated <code>.js</code> and <code>.html</code> files in <code>build/web</code> folder. Open with any browser.</p> <p>Warning</p> <p>Open <code>.html</code> locally can result some Javascript errors. You can use command <code>python3 -m http.server</code> to deploy a simple HTTP server and open in browser <code>http://127.0.0.1:8000</code>.</p>"},{"location":"getting-started/building/building-for-ios/","title":"Building for iOS","text":""},{"location":"getting-started/building/building-for-ios/#only-for-osx","title":"Only for OSX","text":""},{"location":"getting-started/building/building-for-ios/#1-clone-supernova-project","title":"1. Clone Supernova project","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-ios/#2-download-xcode","title":"2. Download Xcode","text":"<p>Using Mac App Store find Xcode.</p>"},{"location":"getting-started/building/building-for-ios/#3-open-project-using-template","title":"3. Open project using template","text":"<ul> <li>In Supernova directory, open Xcode project workspace in: <code>workspaces/xcode/</code>.</li> <li>Select target <code>Supernova iOS</code>.</li> </ul>"},{"location":"getting-started/building/building-for-linux/","title":"Building for Linux","text":""},{"location":"getting-started/building/building-for-linux/#1-clone-supernova-repo","title":"1. Clone Supernova repo","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-linux/#2-install-dependencies","title":"2. Install dependencies","text":"<ul> <li>libglfw3-dev</li> <li>libxi-dev</li> <li>libxcursor-dev</li> <li>libgl1-mesa-dev</li> <li>ninja-build cmake</li> </ul>"},{"location":"getting-started/building/building-for-linux/#3-build-for-linux","title":"3. Build for Linux","text":""},{"location":"getting-started/building/building-for-linux/#a-using-build-tool","title":"a. Using build tool","text":"<p>In <code>tools</code> directory:</p> <p><pre><code>pip install click\n</code></pre> <pre><code>python3 supernova.py --build --platform linux\n</code></pre></p>"},{"location":"getting-started/building/building-for-linux/#b-using-cmake","title":"b. Using CMake","text":"<p>In Supernova root directory:</p> <p><pre><code>mkdir build\n</code></pre> <pre><code>mkdir instdir\n</code></pre> <pre><code>cmake \\\n-S . \\\n-B build \\\n-DCMAKE_BUILD_TYPE=Debug \\\n-G \"Ninja\" \\\n-DCMAKE_INSTALL_PREFIX:PATH=instdir\n</code></pre> <pre><code>cmake --build build --config Debug --target supernova-project\n</code></pre> <pre><code>cmake --install build --config Debug --strip\n</code></pre></p>"},{"location":"getting-started/building/building-for-macos/","title":"Building for macOS","text":""},{"location":"getting-started/building/building-for-macos/#1-clone-supernova-repo","title":"1. Clone Supernova repo","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-macos/#2-install-dependencies","title":"2. Install dependencies","text":"<ul> <li>cmake</li> <li>ninja</li> </ul>"},{"location":"getting-started/building/building-for-macos/#3-build-for-macos","title":"3. Build for macOS","text":""},{"location":"getting-started/building/building-for-macos/#a-using-build-tool","title":"a. Using build tool","text":"<p>In <code>tools</code> directory:</p> <p><pre><code>pip install click\n</code></pre> <pre><code>python3 supernova.py --build --platform macos\n</code></pre></p>"},{"location":"getting-started/building/building-for-macos/#b-using-cmake","title":"b. Using CMake","text":"<p>In Supernova root directory:</p> <p><pre><code>mkdir build\n</code></pre> <pre><code>mkdir instdir\n</code></pre> <pre><code>cmake \\\n-S . \\\n-B build \\\n-DCMAKE_BUILD_TYPE=Debug \\\n-G \"Ninja\" \\\n-DCMAKE_INSTALL_PREFIX:PATH=instdir\n</code></pre> <pre><code>cmake --build build --config Debug --target supernova-project\n</code></pre> <pre><code>cmake --install build --config Debug --strip\n</code></pre></p>"},{"location":"getting-started/building/building-for-windows/","title":"Building for Windows","text":""},{"location":"getting-started/building/building-for-windows/#1-clone-supernova-repo","title":"1. Clone Supernova repo","text":"<p><code>git clone https://github.com/supernovaengine/supernova.git</code></p>"},{"location":"getting-started/building/building-for-windows/#2-install-dependencies","title":"2. Install dependencies","text":"<ul> <li>cmake</li> </ul>"},{"location":"getting-started/building/building-for-windows/#3-build-for-windows","title":"3. Build for Windows","text":""},{"location":"getting-started/building/building-for-windows/#a-using-build-tool","title":"a. Using build tool","text":"<p>In <code>tools</code> directory:</p> <p><pre><code>pip install click\n</code></pre> <pre><code>python3 supernova.py --build --platform windows\n</code></pre></p>"},{"location":"getting-started/building/building-for-windows/#b-using-cmake","title":"b. Using CMake","text":"<p>In Supernova root directory:</p> <p><pre><code>mkdir build\n</code></pre> <pre><code>mkdir instdir\n</code></pre> <pre><code>cmake \\\n-S . \\\n-B build \\\n-DCMAKE_BUILD_TYPE=Debug \\\n-G \"Visual Studio 17 2022\" \\\n-DCMAKE_INSTALL_PREFIX:PATH=instdir\n</code></pre> <pre><code>cmake --build build --config Debug --target supernova-project\n</code></pre> <pre><code>cmake --install build --config Debug --strip\n</code></pre></p>"},{"location":"learning/coordinate-systems/","title":"Coordinate systems","text":"<p>Supernova uses the origin of coordinates at bottom-left for 2D and 3D projects and top-left for UI scenes. This image represents an abstract canvas:</p> <p></p> <p>Under development...</p>"},{"location":"learning/object-animation/","title":"Object animation","text":"<p>It`s possible to animate any object. This page explains how to make the animation work in many ways and ease functions. Animations in Supernova are made by Actions. These Actions can be used in almost all Scene objects.</p> <p>There are these types of actions:</p> <ul> <li>TimedAction<ul> <li>PositionAction</li> <li>RotationAction</li> <li>ScaleAction</li> <li>ColorAction</li> <li>AlphaAction</li> </ul> </li> <li>ParticlesAnimation</li> <li>SpriteAnimation</li> <li>Animation</li> </ul> <p>Actions live sample </p>"},{"location":"learning/object-animation/#action-control","title":"Action control","text":"<p>Any kind of action can be controlled with these tree main methods:</p> Method Description <code>start()</code> Start an Action ou resume if is paused. <code>stop()</code> Stop and reset it timestamp. <code>pause()</code> Pause an Action, could be resumed with run()."},{"location":"learning/object-animation/#action-events","title":"Action events","text":"<p>Also, you can use actions with these callback events:</p> Event Description <code>onStart()</code> When method Start() is called. <code>onPause()</code> When method pause() is called. <code>onStop()</code> When method stop() is called. <code>onStep()</code> Called at each iteration."},{"location":"learning/object-animation/#timedaction","title":"TimedAction","text":"<p>TimedAction is a generic type of action that has the values <code>time</code> and <code>value</code>. Both values can range from 0 to 1. The <code>time</code> is always fixed by a pre-defined duration, but <code>value</code> is calculated by an ease function. <code>Value</code> can be controlled by both pre-defined functions and user-defined functions.</p> <p>Getting value and time from Action:</p> <code>C++</code> <code>Lua</code> <pre><code>float time = action.getTime();\nfloat value = action.getValue();\n</code></pre> <pre><code>time = action:getTime()\nvalue = action:getValue()\n</code></pre> Components ActionComponent TimedActionComponent <p>Example how to use TimeAction to move a triangle that is activated by mouse click and positioned by onStep function:</p> <code>C++</code> <code>Lua</code> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Polygon.h\"\n#include \"TimedAction.h\"\n\nScene scene;\nPolygon triangle(&amp;scene);\nTimedAction action(&amp;scene);\n\nvoid onActionStep();\nvoid onMouseDown(int button, float x, float y, int mods);\n\nvoid init(){\ntriangle.addVertex(0, -100);\ntriangle.addVertex(-50, 50);\ntriangle.addVertex(50, 50);\n\ntriangle.setPosition(Vector3(300,300,0));\ntriangle.setColor(0.6, 0.2, 0.6, 1);\n\naction.setDuration(10);\naction.getComponent&lt;ActionComponent&gt;().onStep = onActionStep;\n\nEngine::setScene(&amp;scene);\nEngine::onMouseDown = onMouseDown;\n}\n\nvoid onActionStep(){\nfloat angle = M_PI * 2.0 * action.getValue();\ntriangle.setPosition(cos(angle)*100 + 450, sin(angle)*100 + 300, 0);\n}\n\nvoid onMouseDown(int button, float x, float y, int mods){\nif (action.isRunning())\naction.pause();\nelse\naction.start();\n}\n</code></pre> <pre><code>scene = Scene()\ntriangle = Polygon(scene)\naction = TimedAction(scene)\n\ntriangle:addVertex(0, -100)\ntriangle:addVertex(-50, 50)\ntriangle:addVertex(Vector3(50, 50,0))\n\ntriangle.position = Vector3(300,300,0)\ntriangle:setColor(0.6, 0.2, 0.6, 1)\n\naction.duration = 10\n\nEngine.setScene(scene)\n\nfunction onActionStep()\n    angle = math.pi * 2.0 * action:getValue()\n    triangle:setPosition(math.cos(angle)*100 + 450, math.sin(angle)*100 + 300, 0);\nend\naction:getActionComponent().onStep = onActionStep\n\nfunction onMouseDown(button, x, y, mods)\n    if (action:isRunning()) then\n        action:pause()\n    else\n        action:start()\n    end\nend\nEngine.onMouseDown = onMouseDown\n</code></pre> <p>Similar to the previous example, the same function can be used with PositionAction instead of TimeAction. This time it is no longer necessary to use <code>onStep()</code>:</p> <code>C++</code> <code>Lua</code> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Polygon.h\"\n#include \"PositionAction.h\"\n\nScene scene;\nPolygon triangle(&amp;scene);\nPositionAction action(&amp;scene);\n\nvoid onMouseDown(int button, float x, float y, int mods);\n\nvoid init(){\ntriangle.addVertex(0, -100);\ntriangle.addVertex(-50, 50);\ntriangle.addVertex(50, 50);\n\ntriangle.setPosition(Vector3(300,300,0));\ntriangle.setColor(0.6, 0.2, 0.6, 1);\n\naction.setFunctionType(EaseType::ELASTIC_IN_OUT);\naction.setAction(triangle.getPosition(), Vector3(0,10,0), 2, true);\naction.setTarget(triangle.getEntity());\n\nEngine::setScene(&amp;scene);\nEngine::onMouseDown = onMouseDown;\n}\n\nvoid onMouseDown(int button, float x, float y, int mods){\nif (action.isRunning())\naction.pause();\nelse\naction.start();\n}\n</code></pre> <pre><code>scene = Scene()\ntriangle = Polygon(scene)\naction = PositionAction(scene)\n\ntriangle:addVertex(0, -100)\ntriangle:addVertex(-50, 50)\ntriangle:addVertex(Vector3(50, 50,0))\n\ntriangle.position = Vector3(300,300,0)\ntriangle:setColor(0.6, 0.2, 0.6, 1)\n\naction:setFunctionType(EaseType.ELASTIC_IN_OUT)\naction:setAction(triangle.position, Vector3(0,10,0), 2, true)\naction.target = triangle.entity\n\nEngine.setScene(scene)\n\nfunction onMouseDown(button, x, y, mods)\n    if (action:isRunning()) then\n        action:pause()\n    else\n        action:start()\n    end\nend\nEngine.onMouseDown = onMouseDown\n</code></pre>"},{"location":"learning/object-animation/#pre-defined-ease-functions","title":"Pre-defined ease functions","text":""},{"location":"learning/object-animation/#linear","title":"Linear","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::LINEAR);\n</code></pre> <pre><code>action:setFunctionType(EaseType.LINEAR)\n</code></pre>"},{"location":"learning/object-animation/#quad","title":"Quad","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::QUAD_IN);\naction.setFunctionType(EaseType::QUAD_OUT);\naction.setFunctionType(EaseType::QUAD_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.QUAD_IN)\naction:setFunctionType(EaseType.QUAD_OUT)\naction:setFunctionType(EaseType.QUAD_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#cubic","title":"Cubic","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::CUBIC_IN);\naction.setFunctionType(EaseType::CUBIC_OUT);\naction.setFunctionType(EaseType::CUBIC_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.CUBIC_IN)\naction:setFunctionType(EaseType.CUBIC_OUT)\naction:setFunctionType(EaseType.CUBIC_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#quart","title":"Quart","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::QUART_IN);\naction.setFunctionType(EaseType::QUART_OUT);\naction.setFunctionType(EaseType::QUART_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.QUART_IN)\naction:setFunctionType(EaseType.QUART_OUT)\naction:setFunctionType(EaseType.QUART_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#quint","title":"Quint","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::QUINT_IN);\naction.setFunctionType(EaseType::QUINT_OUT);\naction.setFunctionType(EaseType::QUINT_IN_OUT);\n</code></pre> <p>``` lua</p> <p>action:setFunctionType(EaseType.QUINT_IN)    action:setFunctionType(EaseType.QUINT_OUT)    action:setFunctionType(EaseType.QUINT_IN_OUT)     ```</p>"},{"location":"learning/object-animation/#sine","title":"Sine","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::SINE_IN);\naction.setFunctionType(EaseType::SINE_OUT);\naction.setFunctionType(EaseType::SINE_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.SINE_IN)\naction:setFunctionType(EaseType.SINE_OUT)\naction:setFunctionType(EaseType.SINE_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#expo","title":"Expo","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::EXPO_IN);\naction.setFunctionType(EaseType::EXPO_OUT);\naction.setFunctionType(EaseType::EXPO_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.EXPO_IN)\naction:setFunctionType(EaseType.EXPO_OUT)\naction:setFunctionType(EaseType.EXPO_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#circ","title":"Circ","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::CIRC_IN);\naction.setFunctionType(EaseType::CIRC_OUT);\naction.setFunctionType(EaseType::CIRC_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.CIRC_IN)\naction:setFunctionType(EaseType.CIRC_OUT)\naction:setFunctionType(EaseType.CIRC_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#elastic","title":"Elastic","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::ELASTIC_IN);\naction.setFunctionType(EaseType::ELASTIC_OUT);\naction.setFunctionType(EaseType::ELASTIC_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.ELASTIC_IN)\naction:setFunctionType(EaseType.ELASTIC_OUT)\naction:setFunctionType(EaseType.ELASTIC_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#back","title":"Back","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::BACK_IN);\naction.setFunctionType(EaseType::BACK_OUT);\naction.setFunctionType(EaseType::BACK_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.BACK_IN)\naction:setFunctionType(EaseType.BACK_OUT)\naction:setFunctionType(EaseType.BACK_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#bounce","title":"Bounce","text":"<code>C++</code> <code>Lua</code> <pre><code>action.setFunctionType(EaseType::BOUNCE_IN);\naction.setFunctionType(EaseType::BOUNCE_OUT);\naction.setFunctionType(EaseType::BOUNCE_IN_OUT);\n</code></pre> <pre><code>action:setFunctionType(EaseType.BOUNCE_IN)\naction:setFunctionType(EaseType.BOUNCE_OUT)\naction:setFunctionType(EaseType.BOUNCE_IN_OUT)\n</code></pre>"},{"location":"learning/object-animation/#user-defined-ease-functions","title":"User-defined ease functions","text":"<p>It's also possible to create new functions and attach it to a TimeAction.</p> <code>C++</code> <code>Lua</code> <pre><code>float newFunction(float time){\nreturn time * 2;\n}\n\naction.getComponent&lt;TimedActionComponent&gt;().function = newFunction;\n</code></pre> <pre><code>function newFunction(time)\n    return time * 2\nend\n\naction:getTimedActionComponent().function = newFunction\n</code></pre>"},{"location":"learning/object-animation/#positionaction","title":"PositionAction","text":"<p>Is used to generate a movement in objects.</p> Components ActionComponent TimedActionComponent PositionActionComponent <code>C++</code> <code>Lua</code> <pre><code>PositionAction action(&amp;scene);\naction.setAction(Vector3(100,200,0), Vector3(0,10,0), 2, false);\n</code></pre> <pre><code>action = PositionAction(scene)\naction:setAction(Vector3(100,200,0), Vector3(0,10,0), 2, true)\n</code></pre>"},{"location":"learning/object-animation/#rotationaction","title":"RotationAction","text":"<p>Is used to generate rotation in objects. Rotations are made by quaternions, but you can easily a create quaternions with angles.</p> Components ActionComponent TimedActionComponent RotationActionComponent <code>C++</code> <code>Lua</code> <pre><code>Quaternion fromAngle;\nfromAngle.fromAngle(20);\n\nQuaternion toAngle;\ntoAngle.fromAngle(80);\n\nRotationAction action(&amp;scene);\naction.setAction(fromAngle, toAngle, 5, true);\n</code></pre> <pre><code>fromAngle = Quaternion()\nfromAngle:fromAngle(20)\n\ntoAngle = Quaternion()\ntoAngle:fromAngle(80)\n\naction = RotationAction(scene)\naction:setAction(fromAngle, toAngle, 2, true)\n</code></pre> <p>For default, a Quaternion method fromAngleAxis uses axis Z (for 2D projects) to perform a rotation, but it`s also possible to make rotations for any axis:</p> <code>C++</code> <code>Lua</code> <pre><code>fromAngle.fromAngleAxis(20, Vector3(0, 1, 0));\n</code></pre> <pre><code>fromAngle:fromAngleAxis(10, Vector3(0,1,0))\n</code></pre>"},{"location":"learning/object-animation/#scaleaction","title":"ScaleAction","text":"<p>Is used to change object scale. Scales are setting by Vector3. For example, if you want increase the object 3 times from Y axis you can use <code>Vector3(1, 3, 1)</code>.</p> Components ActionComponent TimedActionComponent ScaleActionComponent <code>C++</code> <code>Lua</code> <pre><code>ScaleAction action(&amp;scene);\naction.setAction(Vector3(1,1,1), Vector3(1,10,1), 2, true);\n</code></pre> <pre><code>action = ScaleAction(scene)\naction:setAction(Vector3(1,1,1), Vector3(1,10,1), 2, true)\n</code></pre>"},{"location":"learning/object-animation/#coloraction","title":"ColorAction","text":"<p>Is used to change the color of object.</p> Components ActionComponent TimedActionComponent ColorActionComponent <code>C++</code> <code>Lua</code> <pre><code>ColorAction action(&amp;scene);\naction.setAction(Vector3(0, 0.5, 0.8), Vector3(1, 0.4, 0), 5, true);\n</code></pre> <pre><code>action = ColorAction(scene)\naction:setAction(Vector3(0, 0.5, 0.8), Vector3(1, 0.4, 0), 5, true)\n</code></pre>"},{"location":"learning/object-animation/#alphaaction","title":"AlphaAction","text":"<p>Is used to change alpha factor of object. Alpha 1.0 \u00e9 full opaque object and alpha 0.0 is full transparent object.</p> Components ActionComponent TimedActionComponent AlphaActionComponent <code>C++</code> <code>Lua</code> <pre><code>AlphaAction action(&amp;scene);\naction.setAction(1, 0, 5, true);\n</code></pre> <pre><code>action = AlphaAction(scene)\naction:setAction(1, 0, 5, true)\n</code></pre>"},{"location":"learning/particle-system/","title":"Particle system","text":"<p>In Supernova to use particle system you have to two kind of tools: Particle Initializers and Particle Modifiers.</p> <ul> <li>Particle Initializers<ul> <li>Life</li> <li>Position</li> <li>Velocity</li> <li>Acceleration</li> <li>Color</li> <li>Alpha</li> <li>Size</li> <li>Sprite</li> <li>Rotation</li> </ul> </li> <li>Particle Modifiers<ul> <li>Position</li> <li>Velocity</li> <li>Acceleration</li> <li>Color</li> <li>Alpha</li> <li>Size</li> <li>Sprite</li> <li>Rotation</li> </ul> </li> </ul> <p>Particles live sample </p> <p>Here is an example how Inittializers and Modifiers can be used to create particles animation.</p> <code>C++</code> <code>Lua</code> <pre><code>#include \"Supernova.h\"\nusing namespace Supernova;\n\n#include \"Particles.h\"\n#include \"ParticlesAnimation.h\"\n\nScene scene;\n\nParticles particles(&amp;scene);\nParticlesAnimation partianim(&amp;scene);\n\nvoid init(){\nparticles.setMaxParticles(100);\nparticles.setTexture(\"f4.png\");\nparticles.setPosition(300, 100, 0);\npartianim.setTarget(particles.getEntity());\n\npartianim.setRate(10);\n\npartianim.setLifeInitializer(10);\npartianim.setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0));\npartianim.setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0));\npartianim.setColorInitializer(Vector3(0,0,0), Vector3(1,1,1));\npartianim.setSizeInitializer(10, 50);\n\npartianim.setVelocityModifier(5, 8, Vector3(0,10,0), Vector3(0,300,0), EaseType::CUBIC_IN_OUT);\npartianim.setAlphaModifier(4, 6, 1, 0.2);\n\nEngine::setScene(&amp;scene);\n\npartianim.start();\n}\n</code></pre> <pre><code>scene = Scene()\n\nparticles = Particles(scene)\npartianim = ParticlesAnimation(scene)\n\nparticles.maxParticles = 100\nparticles:setPosition(300, 100, 0)\nparticles:setTexture(\"f4.png\")\npartianim.target = particles.entity\n\npartianim.rate = 10\n\npartianim:setLifeInitializer(10)\npartianim:setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0))\npartianim:setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0))\npartianim:setColorInitializer(Vector3(0,0,0), Vector3(1,1,1))\npartianim:setSizeInitializer(10, 50)\n\npartianim:setVelocityModifier(5, 8, Vector3(0,10,0), Vector3(0,300,0), EaseType.CUBIC_IN_OUT)\npartianim:setAlphaModifier(4, 6, 1, 0.2)\n\nEngine.setScene(scene)\n\npartianim:start()\n</code></pre>"},{"location":"learning/particle-system/#particle-initializers","title":"Particle Initializers","text":""},{"location":"learning/particle-system/#life-initializer","title":"Life Initializer","text":"<p>Every particle has its life and this life is regressive. When a particle starts, through this class you can set the lifetime of it. Throughout the life of the particle, when it reaches 0, the particle dies.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setLifeInitializer(10, 10);\n</code></pre> <pre><code>partianim:setLifeInitializer(10, 10)\n</code></pre>"},{"location":"learning/particle-system/#position-initializer","title":"Position Initializer","text":"<p>The initial position of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0));\n</code></pre> <pre><code>partianim:setPositionInitializer(Vector3(0,0,0), Vector3(300,0,0))\n</code></pre>"},{"location":"learning/particle-system/#velocity-initializer","title":"Velocity Initializer","text":"<p>It's the initial velocity of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0));\n</code></pre> <pre><code>partianim:setVelocityInitializer(Vector3(0,10,0), Vector3(0,50,0))\n</code></pre>"},{"location":"learning/particle-system/#acceleration-initializer","title":"Acceleration Initializer","text":"<p>It's to set inital acceleration of particle with this class.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setAccelerationInitializer(Vector3(0,100,0), Vector3(0,200,0));\n</code></pre> <pre><code>partianim:setAccelerationInitializer(Vector3(0,100,0), Vector3(0,200,0))\n</code></pre>"},{"location":"learning/particle-system/#color-initializer","title":"Color Initializer","text":"<p>Can be used to set initial color of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setColorInitializer(Vector3(0,0,0), Vector3(1,1,1));\n</code></pre> <pre><code>partianim:setColorInitializer(Vector3(0,0,0), Vector3(1,1,1))\n</code></pre>"},{"location":"learning/particle-system/#alpha-initializer","title":"Alpha Initializer","text":"<p>It can be used to set particle transparency. When set 0 is total transparent particle, when set 1.0 is total opaque particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setAlphaInitializer(0, 1);\n</code></pre> <pre><code>partianim:setAlphaInitializer(0, 1)\n</code></pre>"},{"location":"learning/particle-system/#size-initializer","title":"Size Initializer","text":"<p>Every particle can have its size. This class is used to set initial size of particle.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setSizeInitializer(10, 50);\n</code></pre> <pre><code>partianim:setSizeInitializer(10, 50)\n</code></pre>"},{"location":"learning/particle-system/#sprite-initializer","title":"Sprite Initializer","text":"<p>A particle can also have behave like a sprite. The sprite of particle is set by an integer and during particle creation the initial sprite is sorted. In Supernova we call sprite as a rect of sprite sheet.</p> <code>C++</code> <code>Lua</code> <pre><code>std::vector&lt;int&gt; sprites;\nsprites.push_back(1);\nsprites.push_back(0);\nsprites.push_back(2);\npartianim.setSpriteIntializer(sprites);\n</code></pre> <pre><code>partianim:setSpriteIntializer({1, 0, 2})\n</code></pre>"},{"location":"learning/particle-system/#rotation-initializer","title":"Rotation Initializer","text":"<p>The initial rotation of particle is set with this class. The engine default is degress, but it can be changed.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setRotationInitializer(90, 90);\n</code></pre> <pre><code>partianim:setRotationInitializer(90, 90)\n</code></pre>"},{"location":"learning/particle-system/#particle-modifiers","title":"Particle Modifiers","text":""},{"location":"learning/particle-system/#position-modifier","title":"Position Modifier","text":"<p>This modifier makes all particles travel from start position to end position in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setPositionModifier(2, 4, Vector3(0,0,0), Vector3(0,300,0));\n</code></pre> <pre><code>partianim:setPositionModifier(2, 4, Vector3(0,0,0), Vector3(0,300,0))\n</code></pre>"},{"location":"learning/particle-system/#velocity-modifier","title":"Velocity Modifier","text":"<p>This modifier changes particle velocity in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setVelocityModifier(5, 8, Vector3(0,10,0), Vector3(0,300,0));\n</code></pre> <pre><code>partianim:setVelocityModifier(5, 8, Vector3(0,10,0), Vector3(0,300,0))\n</code></pre>"},{"location":"learning/particle-system/#acceleration-modifier","title":"Acceleration Modifier","text":"<p>This modifier changes acceleration in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setAccelerationInitializer(Vector3(0,100,0), Vector3(0,200,0));\n</code></pre> <pre><code>partianim:setAccelerationInitializer(Vector3(0,100,0), Vector3(0,200,0))\n</code></pre>"},{"location":"learning/particle-system/#color-modifier","title":"Color Modifier","text":"<p>This modifier changes color particle in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setColorModifier(2, 5, Vector3(1,1,1), Vector3(1,0,0));\n</code></pre> <pre><code>partianim:setColorModifier(2, 5, Vector3(1,1,1), Vector3(1,0,0))\n</code></pre>"},{"location":"learning/particle-system/#alpha-modifier","title":"Alpha Modifier","text":"<p>This modifier changes alpha from particle in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setAlphaModifier(4, 6, 1, 0.2);\n</code></pre> <pre><code>partianim:setAlphaModifier(4, 6, 1, 0.2)\n</code></pre>"},{"location":"learning/particle-system/#size-modifier","title":"Size Modifier","text":"<p>This modifier changes size of particle in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setSizeModifier(1, 3, 10, 50);\n</code></pre> <pre><code>partianim:setSizeModifier(1, 3, 10, 50)\n</code></pre>"},{"location":"learning/particle-system/#sprite-modifier","title":"Sprite Modifier","text":"<p>This modifier changes sprite animation of particle in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setSpriteModifier(5, 8, {0,1,2});\n</code></pre> <pre><code>partianim:setSpriteModifier(5, 8, {0,1,2})\n</code></pre>"},{"location":"learning/particle-system/#rotation-modifier","title":"Rotation Modifier","text":"<p>This modifier changes rotation of particle in determined time.</p> <code>C++</code> <code>Lua</code> <pre><code>partianim.setRotationModifier(1, 5, 0, 360);\n</code></pre> <pre><code>partianim:setRotationModifier(1, 5, 0, 360)\n</code></pre>"},{"location":"learning/screen-scaling/","title":"Screen scaling","text":"<p>To handle with the variety of resolutions and screen sizes of devices, Supernova have some options to choose the better scaling mode. All project code you must declare the size of canvas:</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setCanvasSize(1000,480);\n</code></pre> <pre><code>Engine.setCanvasSize(1000,480)\n</code></pre> <p>This is the base size you must use for design your project. For 3D projects this is used only for perspective view aspect, but for 2D projects this sizes are very important to positioning objects in screen.</p> <p>There are 6 types of scaling mode divided by 2 categories.</p>"},{"location":"learning/screen-scaling/#dynamic-canvas-size-modes","title":"Dynamic canvas size modes","text":""},{"location":"learning/screen-scaling/#fitwidth","title":"FitWidth","text":"<p>This is default mode. This keeps canvas width but floats height. Canvas can be changed from original format, but only height changes. Should be used <code>getPreferredCanvasWidth()</code>and <code>getPreferredCanvasHeight()</code> to get original canvas size.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::FITWIDTH);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::FITWIDTH\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#fitheight","title":"FitHeight","text":"<p>It is similar to FitWidth. This keeps canvas height but floats width. Canvas can be changed from original format, but only width changes. Should be used <code>getPreferredCanvasWidth()</code>and <code>getPreferredCanvasHeight()</code> to get original canvas size.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::FITHEIGHT);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::FITHEIGHT\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#native","title":"Native","text":"<p>This keeps canvas with native window resolution (width and height) and ignore canvas size by <code>setCanvasSize()</code>.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::NATIVE);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::NATIVE\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#static-canvas-size-modes","title":"Static canvas size modes","text":""},{"location":"learning/screen-scaling/#letterbox","title":"Letterbox","text":"<p>This keeps canvas width and height but empty spaces can be show on screen.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::LETTERBOX);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::LETTERBOX\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#crop","title":"Crop","text":"<p>This keeps canvas width and height but part of canvas can be out of screen (not in visible area).</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::CROP);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::CROP\n</code></pre> <p></p>"},{"location":"learning/screen-scaling/#stretch","title":"Stretch","text":"<p>This keeps canvas width and height but scene objects can deform.</p> <code>C++</code> <code>Lua</code> <pre><code>Engine::setScalingMode(Scaling::STRETCH);\n</code></pre> <pre><code>Engine.scalingMode = Scaling::STRETCH\n</code></pre> <p></p>"},{"location":"reference/engine/","title":"Input","text":""},{"location":"reference/engine/#description","title":"Description","text":"<p>Control engine properties and define defaults to be used in all project. Also <code>Engine</code> class provides canvas info.</p>"},{"location":"reference/engine/#properties","title":"Properties","text":"Type Name Default Langs static Scaling scalingMode Scaling::FITWIDTH  |  static TextureStrategy textureStrategy TextureStrategy::RESIZE  |  static bool callMouseInTouchEvent false  |  static bool callTouchInMouseEvent false  |  static bool useDegrees true  |  static bool automaticTransparency true  |  static bool allowEventsOutCanvas false  |  static bool fixedTimeSceneUpdate false  |  static bool updateTime 0.03  |"},{"location":"reference/engine/#methods","title":"Methods","text":"Type Name Langs static void setScene  |  static Scene* getScene  |  static void addSceneLayer  |  static void removeSceneLayer  |  static void removeAllSceneLayers  |  static int getCanvasWidth  |  static int getCanvasHeight  |  static int getPreferredCanvasWidth  |  static int getPreferredCanvasHeight  |  static Rect getViewRect  |  static void setUpdateTimeMS  |  static void getSceneUpdateTime  |  static Platform getPlatform  |  static GraphicBackend getGraphicBackend  |  static void isOpenGL  |  static void getFramerate  |  static void getDeltatime  |"},{"location":"reference/engine/#callback-events","title":"Callback events","text":"Callback Name Langs void() onViewLoaded  |  void() onViewChanged  |  void() onDraw  |  void() onUpdate  |  void() onShutdown  |  void(int,float,float) onTouchStart  |  void(int,float,float) onTouchEnd  |  void(int,float,float) onTouchMove  |  void() onTouchCancel  |  void(int,float,float,int) onMouseDown  |  void(int,float,float,int) onMouseUp  |  void(float,float,int) onMouseScroll  |  void(float,float,int) onMouseMove  |  void() onMouseEnter  |  void() onMouseLeave  |  void(int,bool,int) onKeyDown  |  void(int,bool,int) onKeyUp  |  void(wchar_t) onCharInput  |"},{"location":"reference/engine/#tutorials","title":"Tutorials","text":"<ul> <li>Screen Scaling</li> </ul>"},{"location":"reference/engine/#enumerations","title":"Enumerations","text":""},{"location":"reference/engine/#scaling","title":"Scaling","text":"<ul> <li>FITWIDTH - Keeps canvas width but floats height</li> <li>FITHEIGHT - Keeps canvas height but floats width</li> <li>LETTERBOX - Keeps canvas width and height but empty spaces can be show on screen</li> <li>CROP - Keeps canvas width and height but part of canvas can be out of screen</li> <li>STRETCH - Keeps canvas width and height but scene objects can deform</li> <li>NATIVE - Keeps canvas with native window resolution (width and height)</li> </ul>"},{"location":"reference/engine/#texturestrategy","title":"TextureStrategy","text":"<ul> <li>FIT - Uses FIT algorithm to change texture size</li> <li>RESIZE - Uses RESIZE algorithm to change texture resolution</li> <li>NONE - No changes in texture resolution</li> </ul>"},{"location":"reference/engine/#platform","title":"Platform","text":"<ul> <li>MacOS - The engine is running on MacOS</li> <li>iOS - The engine is running on iOS</li> <li>Web - The engine is running in WebGL/HTML5</li> <li>Android - The engine is running on Android</li> <li>Linux - The engine is running on Linux</li> <li>Windows - The engine is running in Windows</li> </ul>"},{"location":"reference/engine/#graphicbackend","title":"GraphicBackend","text":"<ul> <li>GLCORE33 - The engine graphic backend is OpenGL 3.3</li> <li>GLES2 - The engine graphic backend is OpenGL ES 2</li> <li>GLES3 - The engine graphic backend is OpenGL ES 3</li> <li>D3D11 - The engine graphic backend is DirectX 11</li> <li>METAL - The engine graphic backend is Metal</li> <li>WGPU - The engine graphic backend is WebGPU (for future use)</li> </ul>"},{"location":"reference/engine/#property-details","title":"Property details","text":""},{"location":"reference/engine/#scalingmode","title":"scalingMode","text":"<ul> <li>Setter: static void setScalingMode(Scaling scalingMode) </li> <li>Getter: static Scaling getScalingMode() </li> </ul> <p>Change scaling mode of screen depending of device resolution. Details in tutorial Screen Scaling</p>"},{"location":"reference/engine/#texturestrategy_1","title":"textureStrategy","text":"<ul> <li>Setter: static void setTextureStrategy(TextureStrategy textureStrategy)</li> <li>Getter: static TextureStrategy getTextureStrategy()</li> </ul> <p>Change texture strategy to resize non power-of-two textures.</p>"},{"location":"reference/engine/#callmouseintouchevent","title":"callMouseInTouchEvent","text":"<ul> <li>Setter: static void setCallMouseInTouchEvent(bool callMouseInTouchEvent)</li> <li>Getter: static bool isCallMouseInTouchEvent()</li> </ul> <p>Call mouse events if touch events is called.</p>"},{"location":"reference/engine/#calltouchinmouseevent","title":"callTouchInMouseEvent","text":"<ul> <li>Setter: static void setCallTouchInMouseEvent(bool callTouchInMouseEvent)</li> <li>Getter: static bool isCallTouchInMouseEvent()</li> </ul> <p>Call touch events if mouse events is called.</p>"},{"location":"reference/engine/#usedegrees","title":"useDegrees","text":"<ul> <li>Setter: static void setUseDegrees(bool useDegrees)</li> <li>Getter: static bool isUseDegrees()</li> </ul> <p>Uses degress as default of engine angles. If not it uses radian.</p>"},{"location":"reference/engine/#automatictransparency","title":"automaticTransparency","text":"<ul> <li>Setter: static void setAutomaticTransparency(bool automaticTransparency)</li> <li>Getter: static bool isAutomaticTransparency()</li> </ul> <p>Set automatic transparency detection in all objects. It doesn't affect transparency itself, just detection to sort transparent objects in scene, for example.</p>"},{"location":"reference/engine/#alloweventsoutcanvas","title":"allowEventsOutCanvas","text":"<ul> <li>Setter: static void setAllowEventsOutCanvas(bool allowEventsOutCanvas)</li> <li>Getter: static bool isAllowEventsOutCanvas();</li> </ul> <p>Allow mouse events to be mapped out of canvas.</p>"},{"location":"reference/engine/#fixedtimesceneupdate","title":"fixedTimeSceneUpdate","text":"<ul> <li>Setter: static void setFixedTimeSceneUpdate(bool fixedTimeSceneUpdate)</li> <li>Getter: static bool isFixedTimeSceneUpdate();</li> </ul> <p>If true, scene update events will be called by a fixed time defined by <code>setUpdateTime()</code>, if false scene update events will be called with draw events.</p>"},{"location":"reference/engine/#updatetime","title":"updateTime","text":"<ul> <li>Setter: static void setUpdateTime(float updateTime)</li> <li>Getter: static float getUpdateTime();</li> </ul> <p>Define update time in seconds for update events callbacks. If <code>setFixedTimeSceneUpdate()</code> is set true, scene update events is also called by fixed time.</p>"},{"location":"reference/engine/#methods-details","title":"Methods details","text":""},{"location":"reference/engine/#setscene","title":"setScene","text":"<ul> <li>static void setScene(Scene* scene)</li> </ul> <p>Set main scene of project. To remove main scene just set <code>setScene(NULL)</code>.</p>"},{"location":"reference/engine/#getscene","title":"getScene","text":"<ul> <li>static Scene* getScene()</li> </ul> <p>Get main scene of project.</p>"},{"location":"reference/engine/#addscenelayer","title":"addSceneLayer","text":"<ul> <li>static void addSceneLayer(Scene* scene)</li> </ul> <p>Add a scene to stay one layer below main scene. Could be used in a GUI scene.</p>"},{"location":"reference/engine/#removescenelayer","title":"removeSceneLayer","text":"<ul> <li>static void removeSceneLayer(Scene* scene)</li> </ul> <p>Remove a scene layer.</p>"},{"location":"reference/engine/#removeallscenelayers","title":"removeAllSceneLayers","text":"<ul> <li>static void removeAllSceneLayers()</li> </ul> <p>Remove all scenes from render, except main scene.</p>"},{"location":"reference/engine/#getcanvaswidth","title":"getCanvasWidth","text":"<ul> <li>static int getCanvasWidth()</li> </ul> <p>Get canvas width. This value can be affected by screen scaling mode.</p>"},{"location":"reference/engine/#getcanvasheight","title":"getCanvasHeight","text":"<ul> <li>static int getCanvasHeight()</li> </ul> <p>Get canvas height. This value can be affected by screen scaling mode.</p>"},{"location":"reference/engine/#setcanvassize","title":"setCanvasSize","text":"<ul> <li>static void setCanvasSize(int canvasWidth, int canvasHeight)</li> </ul> <p>Set preferred canvas size for screen. The values setted could be affected by scaling mode. Original setted value can get by getPreferredCanvasWidth() and getPreferredCanvasHeight().</p>"},{"location":"reference/engine/#getpreferredcanvaswidth","title":"getPreferredCanvasWidth","text":"<ul> <li>static int getPreferredCanvasWidth()</li> </ul> <p>Get canvas width that is not modified by screen scaling setup. Preferred canvas is the same value setted in engine.</p>"},{"location":"reference/engine/#getpreferredcanvasheight","title":"getPreferredCanvasHeight","text":"<ul> <li>static int getPreferredCanvasHeight()</li> </ul> <p>Get canvas height that is not modified by screen scaling setup. Preferred canvas is the same value setted in engine.</p>"},{"location":"reference/engine/#getviewrect","title":"getViewRect","text":"<ul> <li>static Rect getViewRect()</li> </ul> <p>Get viewport sizes calculaded based on canvas size, screen size and scaling mode.</p>"},{"location":"reference/engine/#setupdatetimems","title":"setUpdateTimeMS","text":"<ul> <li>static void setUpdateTimeMS(unsigned int updateTimeMS)</li> </ul> <p>The same of updateTime but this method accept time in milliseconds.</p>"},{"location":"reference/engine/#getsceneupdatetime","title":"getSceneUpdateTime","text":"<ul> <li>static float getSceneUpdateTime()</li> </ul> <p>Return update time in seconds of scene. If  fixedTimeSceneUpdate is true, return the same value of updateTime. If not true, return the same of  getDeltatime().</p>"},{"location":"reference/engine/#getplatform","title":"getPlatform","text":"<ul> <li>static Platform getPlatform()</li> </ul> <p>Return system platform that engine is running.</p>"},{"location":"reference/engine/#getgraphicbackend","title":"getGraphicBackend","text":"<ul> <li>static GraphicBackend getGraphicBackend()</li> </ul> <p>Return graphic backend that engine is running.</p>"},{"location":"reference/engine/#isopengl","title":"isOpenGL","text":"<ul> <li>static bool isOpenGL()</li> </ul> <p>Return true if OpenGL (version 3.3, ES 2 or ES 3) is running as graphic backend.</p>"},{"location":"reference/engine/#getframerate","title":"getFramerate","text":"<ul> <li>static float getFramerate()</li> </ul> <p>Return framerate (FPS) of engine.</p>"},{"location":"reference/engine/#getdeltatime","title":"getDeltatime","text":"<ul> <li>static float getDeltatime()</li> </ul> <p>Return deltatime in seconds of engine. Deltatime is the duration of the draw frame.</p>"},{"location":"reference/engine/#callback-event-details","title":"Callback event details","text":""},{"location":"reference/engine/#onviewloaded","title":"onViewLoaded","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onViewLoaded</li> </ul> <p>Called when graphic backend canvas is ready to draw.</p>"},{"location":"reference/engine/#onviewchanged","title":"onViewChanged","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onViewChanged</li> <li>Callback: void()</li> </ul> <p>Called when graphic backend canvas size is changed.</p>"},{"location":"reference/engine/#ondraw","title":"onDraw","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onDraw</li> <li>Callback: void()</li> </ul> <p>Called when graphic backend draw a frame.</p>"},{"location":"reference/engine/#onupdate","title":"onUpdate","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onUpdate</li> <li>Callback: void()</li> </ul> <p>Called in a fixed time based on updateTime.</p> <p>This update callback is not affected by fixedTimeSceneUpdate</p>"},{"location":"reference/engine/#onshutdown","title":"onShutdown","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onShutdown</li> <li>Callback: void()</li> </ul> <p>Called when application is closed.</p>"},{"location":"reference/engine/#ontouchstart","title":"onTouchStart","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float)&gt; onTouchStart</li> <li>Callback: void(int pointer, float x, float y)<ul> <li>pointer - For multitouch reference</li> <li>x - Position in canvas</li> <li>y - Position in canvas</li> </ul> </li> </ul> <p>Called when touch starts.</p>"},{"location":"reference/engine/#ontouchend","title":"onTouchEnd","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float)&gt; onTouchEnd</li> <li>Callback: void(int pointer, float x, float y)<ul> <li>pointer - For multitouch reference</li> <li>x - Position in canvas</li> <li>y - Position in canvas</li> </ul> </li> </ul> <p>Called when touch is finished.</p>"},{"location":"reference/engine/#ontouchmove","title":"onTouchMove","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float)&gt; onTouchMove</li> <li>Callback: void(int pointer, float x, float y)<ul> <li>pointer - For multitouch reference</li> <li>x - Position in canvas</li> <li>y - Position in canvas</li> </ul> </li> </ul> <p>Called when touch is moved.</p>"},{"location":"reference/engine/#ontouchcancel","title":"onTouchCancel","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onTouchCancel</li> <li>Callback: void()</li> </ul> <p>Called when touch movement is cancelled by system.</p>"},{"location":"reference/engine/#onmousedown","title":"onMouseDown","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float,int)&gt; onMouseDown</li> <li>Callback: void(int button, float x, float y, int mods)<ul> <li>button - Mouse button reference based on Input</li> <li>x - Position in canvas</li> <li>y - Position in canvas</li> <li>mods - Modifier based on Input</li> </ul> </li> </ul> <p>Called when one of mouse buttons is down.</p>"},{"location":"reference/engine/#onmouseup","title":"onMouseUp","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float,int)&gt; onMouseUp</li> <li>Callback: void(int button, float x, float y, int mods)<ul> <li>button - Mouse button reference based on Input</li> <li>x - Position in canvas</li> <li>y - Position in canvas</li> <li>mods - Modifier based on Input</li> </ul> </li> </ul> <p>Called when one of mouse buttons is up.</p>"},{"location":"reference/engine/#onmousemove","title":"onMouseMove","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(float,float,int)&gt; onMouseMove</li> <li>Callback: void(float x, float y, int mods)<ul> <li>x - Position in canvas</li> <li>y - Position in canvas</li> <li>mods - Modifier based on Input</li> </ul> </li> </ul> <p>Called when one of mouse buttons is moving. If allowEventsOutCanvas is true this event is also called if mouse is outside canvas.</p>"},{"location":"reference/engine/#onmousescroll","title":"onMouseScroll","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(float,float,int)&gt; onMouseScroll</li> <li>Callback: void(float xoffset, float yoffset, int mods)<ul> <li>xoffset - Scroll x position</li> <li>yoffset - Scroll y position</li> <li>mods - Modifier based on Input</li> </ul> </li> </ul> <p>Called when mouse scroll is changed.</p>"},{"location":"reference/engine/#onmouseenter","title":"onMouseEnter","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onMouseEnter</li> <li>Callback: void()</li> </ul> <p>Called when mouse pointer enter in canvas boundary.</p>"},{"location":"reference/engine/#onmouseleave","title":"onMouseLeave","text":"<ul> <li>Property: static FunctionSubscribe&lt;void()&gt; onMouseLeave</li> <li>Callback: void()</li> </ul> <p>Called when mouse pointer leave in canvas boundary.</p>"},{"location":"reference/engine/#onkeydown","title":"onKeyDown","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float)&gt; onKeyDown</li> <li>Callback: void(int key, bool repeat, int mods)<ul> <li>key - Key code based on Input</li> <li>repeat - True if key is keep pressed many times</li> <li>mods - Modifier based on Input</li> </ul> </li> </ul> <p>Called when any keyboard key is down.</p>"},{"location":"reference/engine/#onkeyup","title":"onKeyUp","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(int,float,float)&gt; onKeyUp</li> <li>Callback: void(int key, bool repeat, int mods)<ul> <li>key - Key code based on Input</li> <li>repeat - True if key is keep pressed many times</li> <li>mods - Modifier based on Input</li> </ul> </li> </ul> <p>Called when any keyboard key is up.</p>"},{"location":"reference/engine/#oncharinput","title":"onCharInput","text":"<ul> <li>Property: static FunctionSubscribe&lt;void(wchar_t)&gt; onCharInput</li> <li>Callback: void(wchar_t codepoint)<ul> <li>codepoint - Codepoint of inserted char</li> </ul> </li> </ul> <p>Called when any keyboard key is down, but it sends char information. For example, combination keys can be used to generate accented chars.</p>"},{"location":"reference/input/","title":"Input","text":""},{"location":"reference/input/#description","title":"Description","text":"<p>This class has input state information and all keys and modifiers codes to help input handle.</p>"},{"location":"reference/input/#methods","title":"Methods","text":"Type Name Langs static bool isKeyPressed  |  static bool isMousePressed  |  static bool isTouch  |  static bool isMouseEntered  |  static Vector2 getMousePosition  |  static Vector2 getMouseScroll  |  static Vector2 getTouchPosition  |  static std::vector&lt;Touch&gt; getTouches  |  static size_t numTouches  |  static int getModifiers  |  static size_t findTouchIndex  |"},{"location":"reference/input/#structs","title":"Structs","text":""},{"location":"reference/input/#touch","title":"Touch","text":"<p>Has info of touch event.</p> <ul> <li>int pointer - Pointer information for multitouch</li> <li>Vector2 position - Position of touch</li> </ul>"},{"location":"reference/input/#definitions","title":"Definitions","text":""},{"location":"reference/input/#modifiers","title":"Modifiers","text":"<ul> <li>S_MODIFIER_SHIFT -           0x0001</li> <li>S_MODIFIER_CONTROL -         0x0002</li> <li>S_MODIFIER_ALT -             0x0004</li> <li>S_MODIFIER_SUPER -           0x0008</li> <li>S_MODIFIER_CAPS_LOCK -       0x0010</li> <li>S_MODIFIER_NUM_LOCK -        0x0020</li> </ul>"},{"location":"reference/input/#keys","title":"Keys","text":"<ul> <li>S_KEY_UNKNOWN -              -1</li> <li>S_KEY_SPACE -                32</li> <li>S_KEY_APOSTROPHE -           39</li> <li>S_KEY_COMMA -                44</li> <li>S_KEY_MINUS -                45</li> <li>S_KEY_PERIOD -               46</li> <li>S_KEY_SLASH -                47</li> <li>S_KEY_0 -                    48</li> <li>S_KEY_1 -                    49</li> <li>S_KEY_2 -                    50</li> <li>S_KEY_3 -                    51</li> <li>S_KEY_4 -                    52</li> <li>S_KEY_5 -                    53</li> <li>S_KEY_6 -                    54</li> <li>S_KEY_7 -                    55</li> <li>S_KEY_8 -                    56</li> <li>S_KEY_9 -                    57</li> <li>S_KEY_SEMICOLON -            59</li> <li>S_KEY_EQUAL -                61</li> <li>S_KEY_A -                    65</li> <li>S_KEY_B -                    66</li> <li>S_KEY_C -                    67</li> <li>S_KEY_D -                    68</li> <li>S_KEY_E -                    69</li> <li>S_KEY_F -                    70</li> <li>S_KEY_G -                    71</li> <li>S_KEY_H -                    72</li> <li>S_KEY_I -                    73</li> <li>S_KEY_J -                    74</li> <li>S_KEY_K -                    75</li> <li>S_KEY_L -                    76</li> <li>S_KEY_M -                    77</li> <li>S_KEY_N -                    78</li> <li>S_KEY_O -                    79</li> <li>S_KEY_P -                    80</li> <li>S_KEY_Q -                    81</li> <li>S_KEY_R -                    82</li> <li>S_KEY_S -                    83</li> <li>S_KEY_T -                    84</li> <li>S_KEY_U -                    85</li> <li>S_KEY_V -                    86</li> <li>S_KEY_W -                    87</li> <li>S_KEY_X -                    88</li> <li>S_KEY_Y -                    89</li> <li>S_KEY_Z -                    90</li> <li>S_KEY_LEFT_BRACKET -         91</li> <li>S_KEY_BACKSLASH -            92</li> <li>S_KEY_RIGHT_BRACKET -        93</li> <li>S_KEY_GRAVE_ACCENT -         96</li> <li>S_KEY_WORLD_1 -              161  (non-US #1)</li> <li>S_KEY_WORLD_2 -              162  (non-US #2)</li> <li>S_KEY_ESCAPE -               256</li> <li>S_KEY_ENTER -                257</li> <li>S_KEY_TAB -                  258</li> <li>S_KEY_BACKSPACE -            259</li> <li>S_KEY_INSERT -               260</li> <li>S_KEY_DELETE -               261</li> <li>S_KEY_RIGHT -                262</li> <li>S_KEY_LEFT -                 263</li> <li>S_KEY_DOWN -                 264</li> <li>S_KEY_UP -                   265</li> <li>S_KEY_PAGE_UP -              266</li> <li>S_KEY_PAGE_DOWN -            267</li> <li>S_KEY_HOME -                 268</li> <li>S_KEY_END -                  269</li> <li>S_KEY_CAPS_LOCK -            280</li> <li>S_KEY_SCROLL_LOCK -          281</li> <li>S_KEY_NUM_LOCK -             282</li> <li>S_KEY_PRINT_SCREEN -         283</li> <li>S_KEY_PAUSE -                284</li> <li>S_KEY_F1 -                   290</li> <li>S_KEY_F2 -                   291</li> <li>S_KEY_F3 -                   292</li> <li>S_KEY_F4 -                   293</li> <li>S_KEY_F5 -                   294</li> <li>S_KEY_F6 -                   295</li> <li>S_KEY_F7 -                   296</li> <li>S_KEY_F8 -                   297</li> <li>S_KEY_F9 -                   298</li> <li>S_KEY_F10 -                  299</li> <li>S_KEY_F11 -                  300</li> <li>S_KEY_F12 -                  301</li> <li>S_KEY_F13 -                  302</li> <li>S_KEY_F14 -                  303</li> <li>S_KEY_F15 -                  304</li> <li>S_KEY_F16 -                  305</li> <li>S_KEY_F17 -                  306</li> <li>S_KEY_F18 -                  307</li> <li>S_KEY_F19 -                  308</li> <li>S_KEY_F20 -                  309</li> <li>S_KEY_F21 -                  310</li> <li>S_KEY_F22 -                  311</li> <li>S_KEY_F23 -                  312</li> <li>S_KEY_F24 -                  313</li> <li>S_KEY_F25 -                  314</li> <li>S_KEY_KP_0 -                 320</li> <li>S_KEY_KP_1 -                 321</li> <li>S_KEY_KP_2 -                 322</li> <li>S_KEY_KP_3 -                 323</li> <li>S_KEY_KP_4 -                 324</li> <li>S_KEY_KP_5 -                 325</li> <li>S_KEY_KP_6 -                 326</li> <li>S_KEY_KP_7 -                 327</li> <li>S_KEY_KP_8 -                 328</li> <li>S_KEY_KP_9 -                 329</li> <li>S_KEY_KP_DECIMAL -           330</li> <li>S_KEY_KP_DIVIDE -            331</li> <li>S_KEY_KP_MULTIPLY -          332</li> <li>S_KEY_KP_SUBTRACT -          333</li> <li>S_KEY_KP_ADD -               334</li> <li>S_KEY_KP_ENTER -             335</li> <li>S_KEY_KP_EQUAL -             336</li> <li>S_KEY_LEFT_SHIFT -           340</li> <li>S_KEY_LEFT_CONTROL -         341</li> <li>S_KEY_LEFT_ALT -             342</li> <li>S_KEY_LEFT_SUPER -           343</li> <li>S_KEY_RIGHT_SHIFT -          344</li> <li>S_KEY_RIGHT_CONTROL -        345</li> <li>S_KEY_RIGHT_ALT -            346</li> <li>S_KEY_RIGHT_SUPER -          347</li> <li>S_KEY_MENU -                 348</li> <li>S_KEY_LAST -                 S_KEY_MENU</li> </ul>"},{"location":"reference/input/#mouse-button","title":"Mouse button","text":"<ul> <li>S_MOUSE_BUTTON_1 -     0</li> <li>S_MOUSE_BUTTON_2 -     1</li> <li>S_MOUSE_BUTTON_3 -     2</li> <li>S_MOUSE_BUTTON_4 -     3</li> <li>S_MOUSE_BUTTON_5 -     4</li> <li>S_MOUSE_BUTTON_6 -     5</li> <li>S_MOUSE_BUTTON_7 -     6</li> <li>S_MOUSE_BUTTON_8 -     7</li> <li>S_MOUSE_BUTTON_LAST -      S_MOUSE_BUTTON_8</li> <li>S_MOUSE_BUTTON_LEFT -      S_MOUSE_BUTTON_1</li> <li>S_MOUSE_BUTTON_RIGHT -     S_MOUSE_BUTTON_2</li> <li>S_MOUSE_BUTTON_MIDDLE -    S_MOUSE_BUTTON_3</li> </ul>"},{"location":"reference/input/#methods-details","title":"Methods details","text":""},{"location":"reference/input/#iskeypressed","title":"isKeyPressed","text":"<ul> <li>static bool isKeyPressed(int key)</li> </ul> <p>Return true when key is pressed.</p>"},{"location":"reference/input/#ismousepressed","title":"isMousePressed","text":"<ul> <li>static bool isMousePressed(int button)</li> </ul> <p>Return true when any mouse button is pressed.</p>"},{"location":"reference/input/#istouch","title":"isTouch","text":"<ul> <li>static bool isTouch()</li> </ul> <p>Return true when touch is activated.</p>"},{"location":"reference/input/#ismouseentered","title":"isMouseEntered","text":"<ul> <li>static bool isMouseEntered()</li> </ul> <p>Return true when mouse entered in canvas boundary.</p>"},{"location":"reference/input/#getmouseposition","title":"getMousePosition","text":"<ul> <li>static Vector2 getMousePosition()</li> </ul> <p>Return mouse pointer position based on canvas.</p>"},{"location":"reference/input/#getmousescroll","title":"getMouseScroll","text":"<ul> <li>static Vector2 getMouseScroll()</li> </ul> <p>Return mouse scrool information.</p>"},{"location":"reference/input/#gettouchposition","title":"getTouchPosition","text":"<ul> <li>static Vector2 getTouchPosition(int pointer)</li> </ul> <p>Return touch position of a pointer.</p> <p>### getTouches</p> <ul> <li>static std::vector getTouches() <p>Return all touches information in this moment.</p> <p>### numTouches</p> <ul> <li>static size_t numTouches()</li> </ul> <p>Return number of touches in this moment.</p>"},{"location":"reference/input/#getmodifiers","title":"getModifiers","text":"<ul> <li>static int getModifiers()</li> </ul> <p>Return modifier binary flag.</p>"},{"location":"reference/input/#findtouchindex","title":"findTouchIndex","text":"<ul> <li>static size_t findTouchIndex(int pointer)</li> </ul> <p>Return touch index in array of getTouches()</p>"},{"location":"reference/log/","title":"Log","text":""},{"location":"reference/log/#description","title":"Description","text":"<p>This class outputs logs platform independent.</p>"},{"location":"reference/log/#methods","title":"Methods","text":"Type Name Langs static void print  |  static void verbose  |  static void debug  |  static void warn  |  static void error  |"},{"location":"reference/log/#methods-details","title":"Methods details","text":""},{"location":"reference/log/#print","title":"print","text":"<ul> <li>static void print(const char* text, ...)</li> </ul> <p> Lua syntax:</p> <ul> <li>void print(const char* text)</li> </ul> <p>Print to output without label. In Android it assumes VERBOSE label.</p>"},{"location":"reference/log/#verbose","title":"verbose","text":"<ul> <li>static void verbose(const char* text, ...)</li> </ul> <p> Lua syntax:</p> <ul> <li>void verbose(const char* text)</li> </ul> <p>Print to output with VERBOSE label.</p>"},{"location":"reference/log/#debug","title":"debug","text":"<ul> <li>static void debug(const char* text, ...)</li> </ul> <p> Lua syntax:</p> <ul> <li>void debug(const char* text)</li> </ul> <p>Print to output with DEBUG label.</p>"},{"location":"reference/log/#warn","title":"warn","text":"<ul> <li>static void warn(const char* text, ...)</li> </ul> <p> Lua syntax:</p> <ul> <li>void warn(const char* text)</li> </ul> <p>Print to output with WARN label.</p>"},{"location":"reference/log/#error","title":"error","text":"<ul> <li>static void error(const char* text, ...)</li> </ul> <p> Lua syntax:</p> <ul> <li>void error(const char* text)</li> </ul> <p>Print to output with ERROR label.</p>"},{"location":"reference/system/","title":"System","text":""},{"location":"reference/system/#description","title":"Description","text":"<p>This class return all platform system information that engine is running. This class is as singleton, all methods are virtual and in C++ should be acessed by instance(). In Lua they can be acessed directly. For example:</p> <code>C++</code> <code>Lua</code> <pre><code>int screenWidth = System::instance().getScreenWidth();\n</code></pre> <pre><code>screenWidth = System.getScreenWidth()\n</code></pre>"},{"location":"reference/system/#methods","title":"Methods","text":"Type Name Langs static System&amp; instance virtual int getScreenWidth  |  virtual int getScreenHeight  |  virtual void showVirtualKeyboard  |  virtual void isFullscreen  |  virtual void requestFullscreen  |  virtual void exitFullscreen  |  virtual void getDirSeparator  |  virtual void getAssetPath  |  virtual void getUserDataPath  |  virtual void getLuaPath  |  virtual void getShaderPath  |"},{"location":"reference/system/#methods-details","title":"Methods details","text":""},{"location":"reference/system/#instance","title":"instance ()","text":"<ul> <li>static System&amp; instance()</li> </ul> <p>Return instace of singleton System class.</p>"},{"location":"reference/system/#getscreenwidth","title":"getScreenWidth","text":"<ul> <li>virtual int getScreenWidth()</li> </ul> <p>Return size o screen width based on system platform resolution.</p>"},{"location":"reference/system/#getscreenheight","title":"getScreenHeight","text":"<ul> <li>virtual int getScreenHeight()</li> </ul> <p>Return size o screen height based on system platform resolution.</p>"},{"location":"reference/system/#showvirtualkeyboard","title":"showVirtualKeyboard","text":"<ul> <li>virtual void showVirtualKeyboard()</li> </ul> <p>Show virtual keyboard if device supports it.</p>"},{"location":"reference/system/#hidevirtualkeyboard","title":"hideVirtualKeyboard","text":"<ul> <li>virtual void hideVirtualKeyboard()</li> </ul> <p>Hide virtual keyboard if device supports it.</p>"},{"location":"reference/system/#isfullscreen","title":"isFullscreen","text":"<ul> <li>virtual bool isFullscreen()</li> </ul> <p>Return true if fullscreen.</p>"},{"location":"reference/system/#isfullscreen_1","title":"isFullscreen","text":"<ul> <li>virtual bool isFullscreen()</li> </ul> <p>Return true if fullscreen.</p>"},{"location":"reference/system/#requestfullscreen","title":"requestFullscreen","text":"<ul> <li>virtual void requestFullscreen()</li> </ul> <p>Request system for enter fullscreen.</p>"},{"location":"reference/system/#exitfullscreen","title":"exitFullscreen","text":"<ul> <li>virtual void exitFullscreen()</li> </ul> <p>Request system for exit fullscreen.</p>"},{"location":"reference/system/#getdirseparator","title":"getDirSeparator","text":"<ul> <li>virtual char getDirSeparator()</li> </ul> <p>Return system dir separador. Ex: \"/\" for Linux and \"\\\" for Windows</p>"},{"location":"reference/system/#getassetpath","title":"getAssetPath","text":"<ul> <li>virtual std::string getAssetPath()</li> </ul> <p>Return assets directory path.</p>"},{"location":"reference/system/#getuserdatapath","title":"getUserDataPath","text":"<ul> <li>virtual std::string getUserDataPath()</li> </ul> <p>Return user data directory path with write permission.</p>"},{"location":"reference/system/#getluapath","title":"getLuaPath","text":"<ul> <li>virtual std::string getLuaPath()</li> </ul> <p>Return Lua directory path.</p>"},{"location":"reference/system/#getshaderpath","title":"getShaderPath","text":"<ul> <li>virtual std::string getShaderPath()</li> </ul> <p>Return shader data directory.</p>"}]}